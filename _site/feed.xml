<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-10-19T19:58:45+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hyuim’s blog</title><subtitle>Hyuim&apos;s personal blog.</subtitle><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><entry><title type="html">Makefile 문법 및 예시</title><link href="http://localhost:4000/42seoul/Makefile/" rel="alternate" type="text/html" title="Makefile 문법 및 예시" /><published>2023-10-19T00:00:00+09:00</published><updated>2023-10-19T00:00:00+09:00</updated><id>http://localhost:4000/42seoul/Makefile</id><content type="html" xml:base="http://localhost:4000/42seoul/Makefile/"><![CDATA[<h1 id="0-들어가며">0. 들어가며</h1>
<hr />
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>빌드를 쉽게 해주는 make와 Makefile에 대해 알아보자.
</code></pre></div></div>

<p><br />
<br /></p>
<h1 id="1-make란">1. make란?</h1>
<hr />
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"의존성 관리”와 “증분 빌드” 기능을 갖춘 빌드 도구.
</code></pre></div></div>

<h2 id="1-1-의존성-관리">1-1. 의존성 관리</h2>

<p>빌드 과정에서 의존성에 따른 빌드 순서는 무척 중요하다.<br />
컴파일, 즉 <code class="language-plaintext highlighter-rouge">a.c</code>로 <code class="language-plaintext highlighter-rouge">a.o</code>를 만들고, <code class="language-plaintext highlighter-rouge">a.o</code>로 <code class="language-plaintext highlighter-rouge">a.out</code>을 만드는 상황을 가정하자.<br />
여기서 <code class="language-plaintext highlighter-rouge">a.out</code>은 <code class="language-plaintext highlighter-rouge">a.o</code>에, <code class="language-plaintext highlighter-rouge">a.o</code>는 <code class="language-plaintext highlighter-rouge">a.c</code>에 의존성이 있다고 할 수 있다.</p>

<div class="notice--primary">
  <p>🔔 <code class="language-plaintext highlighter-rouge">.o</code>파일은 컴파일 과정에서 생성되는 오브젝트 파일입니다.</p>
</div>

<p>이번엔 더 복잡한 상황을 생각해 보자.<br />
만약 프로그램 <code class="language-plaintext highlighter-rouge">exec.out</code>을 만들기 위해 <code class="language-plaintext highlighter-rouge">file1.o</code>, <code class="language-plaintext highlighter-rouge">file2.o</code>, <code class="language-plaintext highlighter-rouge">file3.o</code>가 필요하고 각각은 <code class="language-plaintext highlighter-rouge">file1.c</code>, <code class="language-plaintext highlighter-rouge">file2.c</code>, <code class="language-plaintext highlighter-rouge">file3.c</code>가 필요하다면 의존성 관계는 위의 케이스보다 복잡해진다.</p>

<p>실제로 필요한 프로그램을 코딩할 때는 필요한 소스 파일이 한 두개가 아니고, 이 많은 소스 파일들의 의존성을 직접 파악하기란 쉽지 않다.</p>

<p>실행파일을 만들기 위해 순서를 잘 지키면서 과정을 따라가야 한다. make는 규칙을 정의하면 그 규칙에서 적절한 작업 순서를 찾아서, 그 순서대로 작업을 수행한다. 이것을 <strong>의존성 관리</strong>라고 한다.
<br /></p>
<h2 id="1-2-증분-빌드">1-2. 증분 빌드</h2>

<p>만약 의존성을 파악하지 않고 모든 파일을 다시 컴파일 한다면, 변경된 내용이 없는 <code class="language-plaintext highlighter-rouge">.c</code>파일도 모두 다시 <code class="language-plaintext highlighter-rouge">.o</code> 파일로 만들어야 하므로 컴파일에 불필요한 비용이 든다.</p>

<p>소스 파일에 변경된 내용이 있다면, 변경사항이 있는 소스파일만 <code class="language-plaintext highlighter-rouge">.o</code>파일을 새로 만들어 링킹하는 것이 효율적이다.</p>

<p>즉, 의존성 그래프에서 변경사항을 추적해서 변경이 필요한 것들만 다시 만들면 된다. 하지만 이 과정을 직접 하는 것은 두통을 유발할 수 있다. make는 규칙을 잘 정의하면 무언가가 변경되었을 때, 변경이 필요한 것들만 다시 만들어준다. 이것을 <strong>증분 빌드</strong>라고 한다.</p>

<p><br />
<br /></p>
<h1 id="2-makefile이란">2. Makefile이란?</h1>
<hr />
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>linux상에서 반복적으로 발생하는 컴파일을 쉽게하기 위해서 사용하는 make 프로그램의 설정 파일이다.  
make가 규칙을 정의하면 변경이 필요한 것만 만들어 주는 프로그램이라면, Makefile은 그 규칙을 정의하는 파일이다. &lt;br&gt; ## 2-1. 규칙
</code></pre></div></div>

<p>1-1에서의 예시와 같이 <code class="language-plaintext highlighter-rouge">a.c</code> → <code class="language-plaintext highlighter-rouge">a.o</code> → <code class="language-plaintext highlighter-rouge">a.out</code>의 경우를 생각해 보자.</p>

<p>여기서 <code class="language-plaintext highlighter-rouge">a.c</code>는 사람이 직접 만들 파일이므로 <code class="language-plaintext highlighter-rouge">a.c</code>를 만드는 규칙은 필요하지 않다. 따라서 아래의 두 가지 규칙만을 필요로 한다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">a.c</code> → <code class="language-plaintext highlighter-rouge">a.o</code>
    <ul>
      <li>의존성 : a.c</li>
      <li>만드는 법 : cc -c a.c</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">a.o</code> → <code class="language-plaintext highlighter-rouge">a.out</code>
    <ul>
      <li>의존성 : a.o</li>
      <li>만드는 법 : cc a.o -o a.out</li>
    </ul>
  </li>
</ol>

<p>이를 Makefile 문법으로 나타내면 다음과 같다.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">a.o</span><span class="o">:</span> <span class="nf">a.c</span>
	cc <span class="nt">-c</span> a.c

<span class="nl">a.out</span><span class="o">:</span> <span class="nf">a.o</span>
	cc a.o <span class="nt">-o</span> a.out
</code></pre></div></div>

<p><br />
위 코드 블럭의 첫 번째 경우, <code class="language-plaintext highlighter-rouge">a.o</code>는 <code class="language-plaintext highlighter-rouge">target</code>, <code class="language-plaintext highlighter-rouge">a.c</code>는 <code class="language-plaintext highlighter-rouge">dependency</code>, <code class="language-plaintext highlighter-rouge">cc -c a.c</code>는 <code class="language-plaintext highlighter-rouge">command</code>라고 부른다.
<code class="language-plaintext highlighter-rouge">target</code>은 <code class="language-plaintext highlighter-rouge">command</code>가 수행되어서 나온 결과 파일을 의미한다.</p>

<p>우선 <code class="language-plaintext highlighter-rouge">(target1) (target2) …: (dependency1) (dependency2) …</code> 처럼 의존 관계를 정의하고, 다음 줄부터 탭으로 들여쓰기 해서 한 줄씩 차례대로 쓰면 된다.
<br /></p>
<h2 id="2-1-변수">2-1. 변수</h2>

<p><u>파일의 이름을 직접 사용하는 것은 좋지 않다.</u><br />
예를 들어 특정 파일의 이름을 여러번 쓴다면, 파일 이름이 바뀌거나 의존성에 변화가 생길 때마다 그 파일 이름을 쓴 모든 곳을 수정해야 한다. 그 중 한 곳이라도 수정하는 것을 잊으면 makefile을 통해 컴파일을 할 때 문제가 생긴다. 이런 문제를 피하기 위해 변수를 사용할 수 있다.</p>

<p>변수는 <code class="language-plaintext highlighter-rouge">변수명 = 값</code> 으로 정의하고, <code class="language-plaintext highlighter-rouge">$(변수명)</code>으로 사용할 수 있다.
변수 하나에 여러 파일을 할당하고 싶으면 <code class="language-plaintext highlighter-rouge">\</code>로 구분하여 할당 가능하다.
아래 예시 코드의 <code class="language-plaintext highlighter-rouge">CFLAGS</code>처럼 플래그도 할당 가능하다.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#변수 정의
</span><span class="nv">CC</span> <span class="o">=</span> cc
<span class="nv">SRCS</span> <span class="o">=</span> file1.c <span class="se">\</span>
		file2.c <span class="se">\</span>
		file3.c
		
<span class="nv">OBJS</span> <span class="o">=</span> file1.o <span class="se">\</span>
		file2.o <span class="se">\</span>
		file3.o
		
<span class="nv">TARGET</span> <span class="o">=</span> a.out

<span class="nv">CFLAGS</span> <span class="o">=</span> <span class="nt">-Wall</span> <span class="nt">-Wextra</span> <span class="nt">-Werror</span>

<span class="c">#변수 사용
</span><span class="nl">$(OBJS)</span><span class="o">:</span> <span class="nf">$(SRCS)</span>
	<span class="p">$(</span>CC<span class="p">)</span> <span class="p">$(</span>CFLAGS<span class="p">)</span> <span class="nt">-c</span> <span class="p">$(</span>SRCS<span class="p">)</span>
<span class="nl">$(TARGET)</span><span class="o">:</span> <span class="nf">$(OBJS)</span>
	<span class="p">$(</span>CC<span class="p">)</span> <span class="p">$(</span>OBJS<span class="p">)</span> <span class="nt">-o</span> <span class="p">$(</span>TARGET<span class="p">)</span>
</code></pre></div></div>

<p>이렇게 변수를 정의해두면 파일명이나 컴파일러가 바뀌어도, 그 파일명이나 컴파일러가 쓰인 모든 곳을 바꿀 필요 없이 변수를 정의한 곳만 바꾸면 된다.
<br /></p>
<h2 id="2-2-자동-변수-패턴-규칙">2-2. 자동 변수, 패턴 규칙</h2>

<p>위처럼 모든 파일마다 규칙을 만들어야 한다면 Makefile을 쓰더라도 길이가 매우 길어질 것이다.
보다 간편한 작성을 위해 make는 자동 변수와 패턴 규칙을 제공한다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">자동 변수(Automatic Variables)</code>는 Makefile 안에서 사용할 수 있는, 그때그때 자동으로 만들어지는 변수이다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><strong>자동 변수</strong></th>
      <th style="text-align: center"><strong>의미</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">$@</td>
      <td style="text-align: center">만들려는 파일(target) 이름</td>
    </tr>
    <tr>
      <td style="text-align: center">$&lt;</td>
      <td style="text-align: center">의존성 중 첫번째</td>
    </tr>
    <tr>
      <td style="text-align: center">$^</td>
      <td style="text-align: center">모든 의존성</td>
    </tr>
    <tr>
      <td style="text-align: center">$?</td>
      <td style="text-align: center">현재의 target 파일보다 최근에 갱신된 의존성들</td>
    </tr>
  </tbody>
</table>

<p><br /></p>
<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#예시
</span><span class="nl">a.o</span><span class="o">:</span> <span class="nf">a.c</span>
	cc <span class="nt">-c</span> <span class="nv">$&lt;</span>
<span class="nl">a.out</span><span class="o">:</span> <span class="nf">a.o</span>
	cc <span class="nv">$^</span> <span class="nt">-o</span> <span class="nv">$@</span>
</code></pre></div></div>
<p><br /></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">패턴 규칙(pattern rule)</code>은 반복되는 패턴을 하나의 규칙으로 단순화시킬 때 사용된다. 패턴 규칙에서는 <code class="language-plaintext highlighter-rouge">wildcard %</code>가 사용된다. <code class="language-plaintext highlighter-rouge">%</code>는 어떠한 것과도 매치될 수 있다(shell에서의 *).</li>
</ul>

<p>이런 자동 변수와 패턴을 결합하면 여러 파일에 대한 규칙을 간단하게 정의할 수 있다.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">TARGET</span> <span class="o">=</span> a.out

<span class="nl">%.o</span><span class="o">:</span> <span class="nf">%.c            //%.o가 a.o라면 %.c도 a.c가 된다. //모든 .c 파일 → .o 파일</span>
	cc <span class="nt">-c</span> <span class="nv">$&lt;</span>
	
<span class="nl">$(TARGET)</span><span class="o">:</span> <span class="nf">a.o</span>
	cc <span class="nv">$^</span> <span class="nt">-o</span> <span class="nv">$@</span>
</code></pre></div></div>
<p><br /></p>
<h2 id="2-3-내장-변수-내장-규칙">2-3. 내장 변수, 내장 규칙</h2>

<p>GNU Make에는 많은 변수와 규칙이 내장되어있다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">내장 변수</th>
      <th style="text-align: center">의미</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">CC</td>
      <td style="text-align: center">C 컴파일러. default : cc</td>
    </tr>
    <tr>
      <td style="text-align: center">CFLAGS</td>
      <td style="text-align: center">C 컴파일러 플래그</td>
    </tr>
    <tr>
      <td style="text-align: center">CXX</td>
      <td style="text-align: center">C++ 컴파일러. default : c++</td>
    </tr>
    <tr>
      <td style="text-align: center">CXXFLAGS</td>
      <td style="text-align: center">C++ 컴파일러 플래그</td>
    </tr>
    <tr>
      <td style="text-align: center">LDFLAGS</td>
      <td style="text-align: center">링커 플래그</td>
    </tr>
    <tr>
      <td style="text-align: center">CPPFLAGS</td>
      <td style="text-align: center">C 전처리기 플래그. C와 C++에 모두 사용</td>
    </tr>
  </tbody>
</table>

<p><br />
이런 내장 규칙을 활용해서 Makefile의 길이를 쉽게 줄일 수 있다.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">%.o</span><span class="o">:</span> <span class="nf">%.c</span>
	<span class="p">$(</span>CC<span class="p">)</span> <span class="p">$(</span>TARGET_ARCH<span class="p">)</span> <span class="p">$(</span>CPPFLAGS<span class="p">)</span> <span class="p">$(</span>CFLAGS<span class="p">)</span> <span class="nt">-o</span> <span class="nv">$@</span> <span class="nt">-c</span> <span class="nv">$&lt;</span>
<span class="nl">%.o</span><span class="o">:</span> <span class="nf">%.cpp</span>
	<span class="p">$(</span>CXX<span class="p">)</span> <span class="p">$(</span>TARGET_ARCH<span class="p">)</span> <span class="p">$(</span>CPPFLAGS<span class="p">)</span> <span class="p">$(</span>CXXFLAGS<span class="p">)</span> <span class="nt">-o</span> <span class="nv">$@</span> <span class="nt">-c</span> <span class="nv">$&lt;</span>
<span class="nl">%</span><span class="o">:</span> <span class="nf">%.o</span>
	<span class="p">$(</span>CC<span class="p">)</span> <span class="p">$(</span>TARGET_ARCH<span class="p">)</span> <span class="p">$(</span>LOADLIBES<span class="p">)</span> <span class="p">$(</span>LDLIBS<span class="p">)</span> <span class="p">$(</span>LDFLAGS<span class="p">)</span> <span class="nt">-o</span> <span class="nv">$@</span> <span class="nv">$^</span>
</code></pre></div></div>
<p><br /></p>
<h2 id="2-4-phony-규칙">2-4. .PHONY 규칙</h2>

<p>자주 쓰는 명령어를 make에 등록해서 쓸 수 있다.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">clean</span><span class="o">:</span>
	<span class="nb">rm</span> <span class="nt">-f</span> <span class="k">*</span>.o
</code></pre></div></div>

<p>하지만 위의 경우, clean이라는 파일이 있으면 make clean이 아무것도 실행하지 않는다.
의존성이 없기 때문에 항상 clean 파일이 최신 상태(변경된 의존성 파일이 없는 경우)라고 생각하기 때문이다.</p>

<p>이런 문제를 해결하기 위해 clean을 가짜를 의미하는 .PHONY 타겟으로 지정할 수 있다.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">clean</span><span class="o">:</span>
	<span class="nb">rm</span> <span class="nt">-f</span> <span class="k">*</span>.o
	
<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">clean</span>
</code></pre></div></div>

<p>이렇게 clean을 .PHONY 타겟으로 지정하면 clean이라는 파일이 있어도 make clean이 의도대로 동작한다.
<br /></p>
<h2 id="2-5-매크로-치환macro-substitution">2-5. 매크로 치환(Macro substitution)</h2>

<p>필요에 의해 매크로의 내용을 조금 바꾸어야 할 때가 있다. 매크로 내용의 일부만 바꾸기 위해서는 $(MACRO_NAME:OLD=NEW)와 같은 형식을 이용하면 된다.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">MY_NAME</span> <span class="o">=</span> HyunsoonIm
<span class="nv">NEW_NAME</span> <span class="o">=</span> <span class="p">$(</span>MY_NAME:Im<span class="o">=</span>Kim<span class="p">)</span>
</code></pre></div></div>

<p>위의 예제에서는 <code class="language-plaintext highlighter-rouge">Im</code>이란 부분이 <code class="language-plaintext highlighter-rouge">Kim</code>으로 바뀌게 된다. 즉 <code class="language-plaintext highlighter-rouge">YOUR_NAME</code>이란 매크로의 값은 <code class="language-plaintext highlighter-rouge">HyunsoonKim</code>이 된다.</p>

<p>매크로 치환을 활용하면 오브젝트 파일들을 쉽게 정의할 수 있다.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">SRCS</span> <span class="o">=</span> main.c <span class="se">\</span>
		read.c <span class="se">\</span>
		write.c 
		
<span class="nv">OBJS</span> <span class="o">=</span> <span class="p">$(</span>OBJS:.o<span class="o">=</span>.c<span class="p">)</span>
</code></pre></div></div>

<div class="notice--warning">
  <p>⚠ <code class="language-plaintext highlighter-rouge">OBJS : .o = .c</code>처럼 가독성을 위해 띄어쓰지 말 것.<br />
띄어쓰면 makefile이 인식하지 못한다.</p>
</div>

<p>위 예제의 OBJS에는 SRCS에서 .c가 .o로 바뀐 이름들이 할당된다. 즉 아래와 같다.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">OBJS</span> <span class="o">=</span> main.o read.o write.o
</code></pre></div></div>
<p><br /></p>
<h2 id="2-6-addprefix접두어-붙이기">2-6. addprefix(접두어 붙이기)</h2>

<p>목적에 맞게 폴더를 나눠서 작업을 하거나, 소스 파일들을 어떤 폴더에 옮겨야 하는 상황일 때, makefile이 소스 파일의 위치를 인지할 수 있도록 변수 앞에 경로를 붙여줘야 한다.</p>

<p>변수의 앞에 문자를 붙일 때, addprefix를 사용하면 간편하게 작업할 수 있다.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#예를 들어 main.c, read.c, write.c가 my_files 폴더에 있는 경우,
</span>
<span class="nv">SRCS</span> <span class="o">=</span> main.c <span class="se">\</span>
	read.c <span class="se">\</span>
	write.c

<span class="nv">PATH_PREFIX</span> <span class="o">=</span> ./my_files/

<span class="nv">SRCS_WITH_PATH</span> <span class="o">=</span> <span class="p">$(</span>addprefix <span class="p">$(</span>PATH_PREFIX<span class="p">)</span>, <span class="p">$(</span>SRCS<span class="p">))</span>
</code></pre></div></div>
<p><br />
위 코드는 다음과 같은 의미를 갖는다.</p>
<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">SRCS_WITH_PATH</span> <span class="o">=</span> ./my_files/main.c <span class="se">\</span>
				./my_files/read.c <span class="se">\</span>
				./my_files/write.c
</code></pre></div></div>
<p><br /></p>
<h2 id="2-7-예시">2-7. 예시</h2>
<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 디렉토리 구조 : ./headers, ./libft, ./srcs
# headers : pipex.h 헤더파일이 있는 디렉토리
# libft : libft.a 아카이브 파일이 있는 디렉토리
# srcs : main.c, init.c 등 소스파일이 있는 디렉토리
</span>
<span class="nv">SRCS_NAME</span> <span class="o">=</span>	main.c <span class="se">\</span>
		init.c <span class="se">\</span>
		parse.c <span class="se">\</span>
		exec.c <span class="se">\</span>
		redirect.c

<span class="nv">OBJS</span> <span class="o">=</span> <span class="p">$(</span>SRCS:.c<span class="o">=</span>.o<span class="p">)</span>
<span class="nv">PREFIX</span> <span class="o">=</span> ./srcs/
<span class="nv">SRCS</span> <span class="o">=</span> <span class="p">$(</span>addprefix <span class="p">$(</span>PREFIX<span class="p">)</span>, <span class="p">$(</span>SRCS_NAME<span class="p">))</span>
<span class="nv">CC</span> <span class="o">=</span> cc
<span class="nv">CFLAGS</span> <span class="o">=</span> <span class="nt">-Wall</span> <span class="nt">-Wextra</span> <span class="nt">-Werror</span> <span class="nt">-c</span>
<span class="nv">HEADER</span> <span class="o">=</span> ./headers
<span class="nv">NAME</span> <span class="o">=</span> pipex

<span class="nv">LIBFT</span> <span class="o">=</span> ft

<span class="nl">all </span><span class="o">:</span> <span class="nf">$(NAME)</span>


<span class="nl">$(NAME) </span><span class="o">:</span> <span class="nf">$(OBJS)</span>
	<span class="nb">cd </span>libft<span class="p">;</span> make<span class="p">;</span> <span class="nb">cd</span> ..
	<span class="p">$(</span>CC<span class="p">)</span> <span class="p">$(</span>OBJS<span class="p">)</span> <span class="nt">-Llibft</span> <span class="nt">-l</span><span class="p">$(</span>LIBFT<span class="p">)</span> <span class="nt">-o</span> <span class="p">$(</span>NAME<span class="p">)</span> <span class="nt">-I</span> <span class="p">$(</span>HEADER<span class="p">)</span>

<span class="nl">%.o </span><span class="o">:</span> <span class="nf">%.c</span>
	<span class="p">$(</span>CC<span class="p">)</span> <span class="p">$(</span>CFLAGS<span class="p">)</span> <span class="nv">$&lt;</span> <span class="nt">-o</span> <span class="nv">$@</span> <span class="nt">-I</span> <span class="p">$(</span>HEADER<span class="p">)</span>

<span class="nl">clean </span><span class="o">:</span>
	<span class="nb">cd </span>libft<span class="p">;</span> make clean<span class="p">;</span> <span class="nb">cd</span> ..
	<span class="nb">rm</span> <span class="nt">-f</span> <span class="p">$(</span>OBJS<span class="p">)</span>

<span class="nl">fclean </span><span class="o">:</span> <span class="nf">clean</span>
	<span class="nb">cd </span>libft<span class="p">;</span> make fclean<span class="p">;</span> <span class="nb">cd</span> ..
	<span class="nb">rm</span> <span class="nt">-f</span> <span class="p">$(</span>NAME<span class="p">)</span>

<span class="nl">re </span><span class="o">:</span> <span class="nf">fclean all</span>


<span class="nl">.PHONY </span><span class="o">:</span> <span class="nf">clean fclean re</span>
</code></pre></div></div>

<p><br /></p>
<h3 id="reference">📬 <strong>Reference</strong></h3>

<ul>
  <li><a href="http://doc.kldp.org/KoreanDoc/html/GNU-Make/GNU-Make.html#toc3">GNU Make 강좌</a></li>
  <li><a href="https://80000coding.oopy.io/6172b586-8056-4cb1-8c4f-2179009aef3f#6172b586-8056-4cb1-8c4f-2179009aef3f">Makefile, make 기초</a></li>
</ul>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="42Seoul" /><category term="42Seoul" /><category term="Linux" /><category term="Make" /><category term="Makefile" /><summary type="html"><![CDATA[리눅스에서 빌드를 편하게 해주는 Makefile에 대해 알아보자.]]></summary></entry><entry><title type="html">Markdown 사용법</title><link href="http://localhost:4000/etc/Markdown/" rel="alternate" type="text/html" title="Markdown 사용법" /><published>2023-10-18T00:00:00+09:00</published><updated>2023-10-18T00:00:00+09:00</updated><id>http://localhost:4000/etc/Markdown</id><content type="html" xml:base="http://localhost:4000/etc/Markdown/"><![CDATA[<h1 id="0-들어가며">0. 들어가며</h1>
<hr />
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Github를 구경하다 보면 .md 파일을 자주 만나게 된다.  
이런 파일들은 Markdown 문법으로 작성된 파일이다.  
본 게시글도 Markdown으로 작성되었다.
</code></pre></div></div>

<p><br />
<br /></p>

<h1 id="1-markdown이란">1. Markdown이란?</h1>
<hr />
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Markdown은 일반 텍스트 기반의 경량 마크업 언어이다.
마크업 언어란 태그 등을 이용해 문서나 데이터의 구조 등을 명시하는 언어를 말한다.
Markdown은 일반 텍스트로 서식이 있는 문서를 작성하는 데 사용되며,
일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징이다.
</code></pre></div></div>

<p><br />
<br /></p>

<h1 id="2-markdown-문법">2. Markdown 문법</h1>
<hr />

<h2 id="2-1-제목header">2-1. 제목(Header)</h2>
<hr />

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	# 제목 1
	## 제목 2
	### 제목 3
	#### 제목 4
	##### 제목 5
	###### 제목 6
</code></pre></div></div>
<p><br /></p>

<h1 id="제목-1">제목 1</h1>
<h2 id="제목-2">제목 2</h2>
<h3 id="제목-3">제목 3</h3>
<h4 id="제목-4">제목 4</h4>
<h5 id="제목-5">제목 5</h5>
<h6 id="제목-6">제목 6</h6>

<p><br /></p>
<h2 id="2-2-강조emphasis">2-2. 강조(Emphasis)</h2>
<hr />
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>이텔릭체는 <span class="ge">*별표(asterisks)*</span> 또는 _언더바(underscore)_를 사용한다.
볼드체는 <span class="gs">**별표(asterisks)**</span> 또는 __언더바(underscore)__를 사용한다.
이텔릭체와 볼드체는 혼용 가능하다. <span class="gs">**_예를 들면_**</span> 또는 __<span class="ge">*이렇게*__</span>
취소선은 ~~물결표시(tilde)~~를 사용한다.
밑줄은 <span class="nt">&lt;u&gt;</span>abc<span class="nt">&lt;/u&gt;</span>를 사용한다.
</code></pre></div></div>
<p><br /></p>

<p>이텔릭체는 <em>별표(asterisks)</em> 또는 _언더바(underscore)_를 사용한다.<br />
볼드체는 <strong>별표(asterisks)</strong> 또는 <strong>언더바(underscore)__를 사용한다.<br />
이텔릭체와 볼드체는 혼용 가능하다. **<em>예를 들면</em>** 또는 __<em>이렇게</em></strong><br />
취소선은 <del>물결표시(tilde)</del>를 사용한다.<br />
밑줄은 <u>abc</u>를 사용한다.</p>

<p><br /></p>
<h2 id="2-3-목록lists">2-3. 목록(Lists)</h2>
<hr />
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">	1.</span> first
<span class="p">	2.</span> second
<span class="p">		-</span> second.first
<span class="p">		-</span> second.second
<span class="p">	3.</span> third<span class="sb">

	1. first
		- dash
		* asterisks
		+ plus

	- dash
	* asterisks
	+ plus
</span></code></pre></div></div>

<p><br /></p>

<ol>
  <li>first</li>
  <li>second
    <ul>
      <li>second.first</li>
      <li>second.second</li>
    </ul>
  </li>
  <li>
    <p>third</p>
  </li>
  <li>first
    <ul>
      <li>dash</li>
      <li>asterisks</li>
      <li>plus</li>
    </ul>
  </li>
</ol>

<ul>
  <li>dash</li>
  <li>asterisks</li>
  <li>plus</li>
</ul>

<p><br /></p>
<h2 id="2-4-링크links">2-4. 링크(Links)</h2>
<hr />
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nv">GOOGLE</span><span class="p">](</span><span class="sx">https://google.com</span><span class="p">)</span>

<span class="p">[</span><span class="nv">Naver</span><span class="p">](</span><span class="sx">https://naver.com</span> <span class="nn">"링크 설명"</span><span class="p">)</span>  

<span class="p">[</span><span class="nv">상대적 참조</span><span class="p">](</span><span class="sx">../users/hyuim</span><span class="p">)</span>

<span class="p">[</span><span class="nv">Hyuim's Blog</span><span class="p">][</span><span class="ss">My Blog Link</span><span class="p">]</span>

문서 안에서 [참조 링크]를 사용할 수도 있다.

아래와 같이 일반 URL이나 꺾쇠 안의 URL은 자동으로 링크로 인식한다.
구글 홈페이지 : https://google.com
네이버 홈페이지 : <span class="nv">&lt;https://naver.com&gt;</span>

<span class="p">[</span><span class="ss">참조 링크</span><span class="p">]:</span> <span class="sx">https://google.com</span> <span class="nn">"구글로 이동하기"</span>
<span class="p">[</span><span class="ss">Hyuim's Blog</span><span class="p">]:</span> <span class="sx">https://hyun-soon.github.io/</span>
</code></pre></div></div>
<p><br /></p>

<p><a href="https://google.com">GOOGLE</a></p>

<p><a href="https://naver.com" title="링크 설명">Naver</a></p>

<p><a href="../users/hyuim">상대적 참조</a></p>

<p>[Hyuim’s Blog][My Blog Link]</p>

<p>문서 안에서 <a href="https://google.com" title="구글로 이동하기">참조 링크</a>를 사용할 수도 있다.</p>

<p>아래와 같이 일반 URL이나 꺾쇠 안의 URL은 자동으로 링크로 인식한다.</p>

<p>구글 홈페이지 : https://google.com</p>

<p>네이버 홈페이지 : <a href="https://naver.com">https://naver.com</a></p>

<p><br /></p>
<h2 id="2-5-이미지images">2-5. 이미지(Images)</h2>
<hr />
<p>링크와 비슷하지만 <u>앞에 ! 가 붙는다</u>.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![image name](https://cdn.pixabay.com/photo/2019/12/22/17/13/french-bulldog-4713013_1280.jpg)
</code></pre></div></div>
<p><br /></p>

<p><img src="https://cdn.pixabay.com/photo/2019/12/22/17/13/french-bulldog-4713013_1280.jpg" alt="image name" /></p>

<p><br /></p>
<h2 id="2-6-코드블록code-block">2-6. 코드블록(Code block)</h2>
<hr />
<p>코드를 <strong>```</strong>로 감싼다.<br />
<strong>```</strong> 옆에 언어 종류를 적어주면 해당 언어의 문법에 따라 강조 효과를 줄 수 있다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	```c++
		#include &lt;iostream&gt;
	
		using namespace std;
	
		int main()
		{
			cout &lt;&lt; "abc\n";
			return (0);
		}
	```
</code></pre></div></div>
<p><br /></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
	<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

	<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"abc</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
	<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>
<h2 id="2-7-표table">2-7. 표(Table)</h2>
<hr />
<p>헤더 셀을 구분할 때 3개 이상의 <code class="language-plaintext highlighter-rouge">-</code> 가 필요하다.<br />
헤더 셀을 구분하면서 <code class="language-plaintext highlighter-rouge">:</code> 으로 열을 나눌 수 있다.<br />
가장 좌측과 우측에 있는 <code class="language-plaintext highlighter-rouge">|</code> 는 생략 가능하다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Col1 | Col2 | Col3 |
| --- |: --- |: --- |
| a | b | c |
| d | e | f |
| g | h | i |

Col1 | Col2 | Col3
--- |: --- |: ---
a | b | c
d | e | f
g | h | i
</code></pre></div></div>
<p><br /></p>

<table>
  <thead>
    <tr>
      <th>Col1</th>
      <th>Col2</th>
      <th>Col3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>a</td>
      <td>b</td>
      <td>c</td>
    </tr>
    <tr>
      <td>d</td>
      <td>e</td>
      <td>f</td>
    </tr>
    <tr>
      <td>g</td>
      <td>h</td>
      <td>i</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>Col1</th>
      <th>Col2</th>
      <th>Col3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>a</td>
      <td>b</td>
      <td>c</td>
    </tr>
    <tr>
      <td>d</td>
      <td>e</td>
      <td>f</td>
    </tr>
    <tr>
      <td>g</td>
      <td>h</td>
      <td>i</td>
    </tr>
  </tbody>
</table>

<p><br /></p>
<h2 id="2-8-인용문block-quote">2-8. 인용문(Block Quote)</h2>
<hr />
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>인용문 예시
&gt; 이렇게 인용문을 사용할 수 있습니다.

중첩된 인용문
&gt; 중첩된 인용문도
&gt;&gt; 이렇게 하면
&gt;&gt; 사용할 수
&gt;&gt;&gt; 있습니다.
&gt;&gt;&gt; example1
&gt;&gt;&gt; example2
&gt;&gt;&gt; example3
</code></pre></div></div>
<p><br /></p>

<p>인용문 예시</p>

<blockquote>
  <p>이렇게 인용문을 사용할 수 있습니다.</p>
</blockquote>

<p>중첩된 인용문</p>

<blockquote>
  <p>중첩된 인용문도</p>
  <blockquote>
    <p>이렇게 하면
사용할 수</p>
    <blockquote>
      <p>있습니다.<br />
example1<br />
example2<br />
example3</p>
    </blockquote>
  </blockquote>
</blockquote>

<p><br /></p>
<h2 id="2-9-수평선horizontal-rule">2-9. 수평선(Horizontal Rule)</h2>
<hr />
<p>다음의 기호들을 3개씩 사용하면 수평선을 만들 수 있다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
(Hyphens)

***
(Asterisks)

___
(Underscores)
</code></pre></div></div>
<p><br /></p>

<hr />
<p>(Hyphens)</p>

<hr />
<p>(Asterisks)</p>

<hr />
<p>(Underscores)</p>

<p><br /></p>
<h2 id="2-10-줄바꿈line-breaks">2-10. 줄바꿈(Line Breaks)</h2>
<hr />
<p>일반 줄바꿈이 동작하지 않는다면, 2번의 띄어쓰기를 줄바꿈으로 사용할 수 있다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>가나다라  &lt;!--2칸의 공백--&gt;
마바사
</code></pre></div></div>
<p><br /></p>

<p>가나다라  <!--2칸의 공백--><br />
마바사</p>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="Etc" /><category term="Etc" /><category term="Markdown" /><summary type="html"><![CDATA[Markdown 사용법을 알아보자.]]></summary></entry></feed>