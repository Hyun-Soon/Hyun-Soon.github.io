<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-10-18T21:40:37+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hyuim’s blog</title><subtitle>Hyuim&apos;s personal blog.</subtitle><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><entry><title type="html">Markdown 사용법</title><link href="http://localhost:4000/etc/Markdown/" rel="alternate" type="text/html" title="Markdown 사용법" /><published>2023-10-18T00:00:00+09:00</published><updated>2023-10-18T00:00:00+09:00</updated><id>http://localhost:4000/etc/Markdown</id><content type="html" xml:base="http://localhost:4000/etc/Markdown/"><![CDATA[<p>Github를 구경하다 보면 .md 파일을 자주 만나게 된다.<br />
이런 파일들은 Markdown 문법으로 작성된 파일이다.<br />
본 게시글도 Markdown으로 작성되었다.</p>

<h1 id="1-markdown이란">1. Markdown이란?</h1>
<hr />
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Markdown은 일반 텍스트 기반의 경량 마크업 언어이다.
마크업 언어란 태그 등을 이용해 문서나 데이터의 구조 등을 명시하는 언어를 말한다.
Markdown은 일반 텍스트로 서식이 있는 문서를 작성하는 데 사용되며,
일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징이다.
</code></pre></div></div>

<p><br />
<br /></p>

<h1 id="2-markdown-문법">2. Markdown 문법</h1>
<hr />

<h2 id="2-1-제목header">2-1. 제목(Header)</h2>
<hr />

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	# 제목 1
	## 제목 2
	### 제목 3
	#### 제목 4
	##### 제목 5
	###### 제목 6
</code></pre></div></div>
<p><br /></p>

<h1 id="제목-1">제목 1</h1>
<h2 id="제목-2">제목 2</h2>
<h3 id="제목-3">제목 3</h3>
<h4 id="제목-4">제목 4</h4>
<h5 id="제목-5">제목 5</h5>
<h6 id="제목-6">제목 6</h6>

<p><br /></p>
<h2 id="2-2-강조emphasis">2-2. 강조(Emphasis)</h2>
<hr />
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>이텔릭체는 <span class="ge">*별표(asterisks)*</span> 또는 _언더바(underscore)_를 사용한다.
볼드체는 <span class="gs">**별표(asterisks)**</span> 또는 __언더바(underscore)__를 사용한다.
이텔릭체와 볼드체는 혼용 가능하다. <span class="gs">**_예를 들면_**</span> 또는 __<span class="ge">*이렇게*__</span>
취소선은 ~~물결표시(tilde)~~를 사용한다.
밑줄은 <span class="nt">&lt;u&gt;</span>abc<span class="nt">&lt;/u&gt;</span>를 사용한다.
</code></pre></div></div>
<p><br /></p>

<p>이텔릭체는 <em>별표(asterisks)</em> 또는 _언더바(underscore)_를 사용한다.<br />
볼드체는 <strong>별표(asterisks)</strong> 또는 <strong>언더바(underscore)__를 사용한다.<br />
이텔릭체와 볼드체는 혼용 가능하다. **<em>예를 들면</em>** 또는 __<em>이렇게</em></strong><br />
취소선은 <del>물결표시(tilde)</del>를 사용한다.<br />
밑줄은 <u>abc</u>를 사용한다.</p>

<p><br /></p>
<h2 id="2-3-목록lists">2-3. 목록(Lists)</h2>
<hr />
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">	1.</span> first
<span class="p">	2.</span> second
<span class="p">		-</span> second.first
<span class="p">		-</span> second.second
<span class="p">	3.</span> third<span class="sb">

	1. first
		- dash
		* asterisks
		+ plus

	- dash
	* asterisks
	+ plus
</span></code></pre></div></div>

<p><br /></p>

<ol>
  <li>first</li>
  <li>second
    <ul>
      <li>second.first</li>
      <li>second.second</li>
    </ul>
  </li>
  <li>
    <p>third</p>
  </li>
  <li>first
    <ul>
      <li>dash</li>
      <li>asterisks</li>
      <li>plus</li>
    </ul>
  </li>
</ol>

<ul>
  <li>dash</li>
  <li>asterisks</li>
  <li>plus</li>
</ul>

<p><br /></p>
<h2 id="2-4-링크links">2-4. 링크(Links)</h2>
<hr />
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nv">GOOGLE</span><span class="p">](</span><span class="sx">https://google.com</span><span class="p">)</span>

<span class="p">[</span><span class="nv">Naver</span><span class="p">](</span><span class="sx">https://naver.com</span> <span class="nn">"링크 설명"</span><span class="p">)</span>  

<span class="p">[</span><span class="nv">상대적 참조</span><span class="p">](</span><span class="sx">../users/hyuim</span><span class="p">)</span>

<span class="p">[</span><span class="nv">Hyuim's Blog</span><span class="p">][</span><span class="ss">My Blog Link</span><span class="p">]</span>

문서 안에서 [참조 링크]를 사용할 수도 있다.

아래와 같이 일반 URL이나 꺾쇠 안의 URL은 자동으로 링크로 인식한다.
구글 홈페이지 : https://google.com
네이버 홈페이지 : <span class="nv">&lt;https://naver.com&gt;</span>

<span class="p">[</span><span class="ss">참조 링크</span><span class="p">]:</span> <span class="sx">https://google.com</span> <span class="nn">"구글로 이동하기"</span>
<span class="p">[</span><span class="ss">Hyuim's Blog</span><span class="p">]:</span> <span class="sx">https://hyun-soon.github.io/</span>
</code></pre></div></div>
<p><br /></p>

<p><a href="https://google.com">GOOGLE</a></p>

<p><a href="https://naver.com" title="링크 설명">Naver</a></p>

<p><a href="../users/hyuim">상대적 참조</a></p>

<p>[Hyuim’s Blog][My Blog Link]</p>

<p>문서 안에서 <a href="https://google.com" title="구글로 이동하기">참조 링크</a>를 사용할 수도 있다.</p>

<p>아래와 같이 일반 URL이나 꺾쇠 안의 URL은 자동으로 링크로 인식한다.</p>

<p>구글 홈페이지 : https://google.com</p>

<p>네이버 홈페이지 : <a href="https://naver.com">https://naver.com</a></p>

<p><br /></p>
<h2 id="2-5-이미지images">2-5. 이미지(Images)</h2>
<hr />
<p>링크와 비슷하지만 <u>앞에 ! 가 붙는다</u>.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![image name](https://cdn.pixabay.com/photo/2019/12/22/17/13/french-bulldog-4713013_1280.jpg)
</code></pre></div></div>
<p><br /></p>

<p><img src="https://cdn.pixabay.com/photo/2019/12/22/17/13/french-bulldog-4713013_1280.jpg" alt="image name" /></p>

<p><br /></p>
<h2 id="2-6-코드블록code-block">2-6. 코드블록(Code block)</h2>
<hr />
<p>코드를 ```로 감싼다.
```옆에 언어 종류를 적어주면 해당 언어의 문법에 따라 강조 효과를 줄 수 있다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	```c++
		#include &lt;iostream&gt;
	
		using namespace std;
	
		int main()
		{
			cout &lt;&lt; "abc\n";
			return (0);
		}
	```
</code></pre></div></div>
<p><br /></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
	<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

	<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"abc</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
		<span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
	<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>
<h2 id="2-7-표table">2-7. 표(Table)</h2>
<hr />
<p>헤더 셀을 구분할 때 3개 이상의 ‘-‘ 가 필요하다.
헤더 셀을 구분하면서 ‘:’ 으로 열을 나눌 수 있다.
가장 좌측과 우측에 있는 ‘|’ 는 생략 가능하다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Col1 | Col2 | Col3 |
| --- |: --- |: --- |
| a | b | c |
| d | e | f |
| g | h | i |

Col1 | Col2 | Col3
--- |: --- |: ---
a | b | c
d | e | f
g | h | i
</code></pre></div></div>
<p><br /></p>

<table>
  <thead>
    <tr>
      <th>Col1</th>
      <th>Col2</th>
      <th>Col3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>a</td>
      <td>b</td>
      <td>c</td>
    </tr>
    <tr>
      <td>d</td>
      <td>e</td>
      <td>f</td>
    </tr>
    <tr>
      <td>g</td>
      <td>h</td>
      <td>i</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>Col1</th>
      <th>Col2</th>
      <th>Col3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>a</td>
      <td>b</td>
      <td>c</td>
    </tr>
    <tr>
      <td>d</td>
      <td>e</td>
      <td>f</td>
    </tr>
    <tr>
      <td>g</td>
      <td>h</td>
      <td>i</td>
    </tr>
  </tbody>
</table>

<p><br /></p>
<h2 id="2-8-인용문block-quote">2-8. 인용문(Block Quote)</h2>
<hr />
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>인용문 예시
&gt; 이렇게 인용문을 사용할 수 있습니다.

중첩된 인용문
&gt; 중첩된 인용문도
&gt;&gt; 이렇게 하면
&gt;&gt; 사용할 수
&gt;&gt;&gt; 있습니다.
&gt;&gt;&gt; example1
&gt;&gt;&gt; example2
&gt;&gt;&gt; example3
</code></pre></div></div>
<p><br /></p>

<p>인용문 예시</p>

<blockquote>
  <p>이렇게 인용문을 사용할 수 있습니다.</p>
</blockquote>

<p>중첩된 인용문</p>

<blockquote>
  <p>중첩된 인용문도</p>
  <blockquote>
    <p>이렇게 하면
사용할 수</p>
    <blockquote>
      <p>있습니다.
example1
example2
example3</p>
    </blockquote>
  </blockquote>
</blockquote>

<p><br /></p>
<h2 id="2-9-수평선horizontal-rule">2-9. 수평선(Horizontal Rule)</h2>
<hr />
<p>다음의 기호들을 3개씩 사용하면 수평선을 만들 수 있다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
(Hyphens)

***
(Asterisks)

___
(Underscores)
</code></pre></div></div>
<p><br /></p>

<hr />
<p>(Hyphens)</p>

<hr />
<p>(Asterisks)</p>

<hr />
<p>(Underscores)</p>

<p><br /></p>
<h2 id="2-10-줄바꿈line-breaks">2-10. 줄바꿈(Line Breaks)</h2>
<hr />
<p>일반 줄바꿈이 동작하지 않는다면, 2번의 띄어쓰기를 줄바꿈으로 사용할 수 있다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>가나다라  &lt;!--2칸의 공백--&gt;
마바사
</code></pre></div></div>
<p><br /></p>

<p>가나다라  <!--2칸의 공백--><br />
마바사</p>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="Etc" /><category term="Etc" /><summary type="html"><![CDATA[Markdown 사용법을 알아보자.]]></summary></entry><entry><title type="html">Test Opsidian</title><link href="http://localhost:4000/test-opsidian/" rel="alternate" type="text/html" title="Test Opsidian" /><published>2023-10-18T00:00:00+09:00</published><updated>2023-10-18T00:00:00+09:00</updated><id>http://localhost:4000/test-opsidian</id><content type="html" xml:base="http://localhost:4000/test-opsidian/"><![CDATA[<h1 id="head1">head1</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>this is the test of Obsidian
</code></pre></div></div>

<blockquote>
  <p>abcdefg
aaaaaaa</p>
</blockquote>

<hr />
<p>hi</p>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><summary type="html"><![CDATA[head1 this is the test of Obsidian]]></summary></entry><entry><title type="html">Makefile</title><link href="http://localhost:4000/42seoul/test-copy-notion/" rel="alternate" type="text/html" title="Makefile" /><published>2023-10-15T00:00:00+09:00</published><updated>2023-10-15T00:00:00+09:00</updated><id>http://localhost:4000/42seoul/test-copy-notion</id><content type="html" xml:base="http://localhost:4000/42seoul/test-copy-notion/"><![CDATA[<h2 id="make란">Make란?</h2>
<p>“의존성 관리” 기능을 갖춘 빌드 도구.</p>

<h2 id="의존성"><strong>의존성</strong></h2>

<p>빌드 과정에서 의존성에 따른 빌드 순서는 무척 중요하다.
a.c로 a.o를 만들고, a.o로 a.out을 만드는 상황을 가정하자.
여기서 a.out은 a.o에, a.o는 a.c에 의존성이 있다고 할 수 있다.</p>

<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3f306945-3f5d-41a7-8e01-2ad3953ed329/Untitled.png" alt="a" /></p>

<p>만약 의존성 그래프가 아래와 같이 복잡해지면 어떨까?</p>

<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fc0d1c94-9a0a-47d7-b363-a89b3d0f00b6/Untitled.png" alt="Untitled" /></p>

<p>test를 수행하기 위해 순서를 잘 지키면서 과정을 따라가야 한다.
make는 규칙을 정의하면 그 규칙에서 적절한 작업 순서를 찾아서, 그 순서대로 작업을 수행한다.
이것을 “의존성 관리”라고 한다.</p>

<p><strong>증분 빌드</strong></p>

<p>이전 그림에서 ft_a.c와 testee_sub2.c가 바뀌면 그 변경사항을 test에 어떻게 반영해야 할까?</p>

<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/24b595e8-a2b1-4e60-94c4-4bc7b6341778/Untitled.png" alt="Untitled" /></p>

<p>의존성 그래프에서 변경사항을 추적해서 변경이 필요한 것들만 다시 만들면 된다.
하지만 이 과정은 두통을 유발할 수 있다.
make는 규칙을 잘 정의하면 무언가가 변경되었을 때, 변경이 필요한 것들만 다시 만들어준다.
이것을 “증분 빌드”라고 한다.</p>

<p>&lt;/aside&gt;</p>

<h2 id="makefile">Makefile</h2>

<aside>
💡 **makefile이란?**

linux상에서 반복적으로 발생하는 컴파일을 쉽게하기 위해서 사용하는 make 프로그램의 설정 파일.
make가 규칙을 정의하면 변경이 필요한 것만 만들어 주는 프로그램이라면,
Makefile은 그 규칙을 정의하는 파일이다.

</aside>

<aside>
💡 **규칙**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/14460adf-0d07-4b4e-98ae-a4745eb121d8/Untitled.png)

여기서 a.c는 사람이 직접 만들 파일이므로 a.c를 만드는 규칙은 필요하지 않다.
이 경우에는 아래의 두 가지 규칙을 필요로 한다.

1. a.c를 컴파일해서 a.o를 만드는 규칙

- 의존성 : a.c
- 만드는 법 : cc -c a.c
1. a.o를 링킹해서 a.out을 만드는 규칙
- 의존성 : a.o
- 만드는 방법 : cc a.o -o a.out

이를 Makefile 문법으로 나타내면 다음과 같다.

```makefile
a.o: a.c
	cc -c a.c
a.out: a.o
	cc a.o -o a.out
```

우선 (만들 파일1) (만들 파일2) …: (의존성1) (의존성2) … 처럼 의존 관계를 정의하고, 다음 줄부터 만드는 방법을 한 줄씩 탭으로 들여쓰기 해서 차례대로 쓰면 된다.

---

**변수**

같은 이름을 여러번 쓰는 것은 좋지 않다.
****예를 들어 특정 파일의 이름을 여러번 쓴다면, 파일 이름이 바뀔 때마다 그 파일 이름을 쓴 모든 곳을 수정해야 하고, 그 중 한 곳이라도 수정하는 것을 잊으면 제대로 동작하지 않을 수 있다.
이런 문제를 줄이기 위해 변수를 사용한다.

변수는 변수명 = 값 으로 정의하고, $(변수명)으로 사용할 수 있다.

```makefile
#변수 정의
CC = cc
A_C = a.c
A_O = a.o
TARGET = a.out

#변수 사용
$(A_O): A_C
	$(CC) -c $(A_C)
$(TARGET): $(A_O)
	$(CC) $(A_O) -o $(TARGET)
```

이렇게 변수를 정의해두면 파일명이나 컴파일러가 바뀌어도 그 파일명이나 컴파일러가 쓰인 모든 곳을 바꿀 필요 없이 변수를 정의한 곳만 바꾸면 된다.

---

**자동 변수, 패턴 규칙**

위처럼 모든 파일마다 규칙을 만들어야 한다면 Makefile을 쓰더라도 길이가 매우 길어질 것이다.

다행히 (gnu make에는) 규칙에 패턴을 지정할 수 있다.

하지만 패턴에 대해 알아보기 전에 자동 변수를 먼저 간단히 알아보자.

자동 변수는 규칙 안에서 사용할 수 있는, 그때그때 자동으로 만들어지는 변수이다.

ex.

- $@ : 만들려는 파일 이름
- $&lt; : 의존성 중 첫번째
- $^ : 모든 의존성
- $? : 현재의 목표 파일보다 최근에 갱신된 의존성의 이름들
- …

```makefile
a.o: a.c
	cc -c $&lt;
a.out: a.o
	cc $^ -o $@
```

패턴 규칙(pattern rule)은 반복되는 패턴을 하나의 규칙으로 단순화시킬 때 사용된다.
패턴 규칙에서는 wildcard(%)가 사용된다. %는 어떠한 것과도 매치될 수 있다.

이런 자동 변수와 패턴을 결합하면 여러 파일에 대한 규칙을, 규칙 하나로 커버할 수 있게 된다.

```makefile
EXECUTABLE_TARGETS = a.out

%.o: %.c            //%.o가 foo.o라면 %.c도 foo.c가 된다.
	cc -c $&lt;
$(EXECUTABLE_TARGETS):
	cc $^ -o $@
a.out: a.o
```

---

**내장 변수, 내장 규칙**

GNU Make에는 많은 변수와 규칙이 내장되어있다.

make -p 명령어로 내장 변수와 내장 규칙을 확인할 수 있다.

- 자주 쓰이는 내장 변수
    - CC : C 컴파일러. 기본값은 cc
    - CFLAGS : C 컴파일러 플래그
    - CXX : C++ 컴파일러. 기본값은 c++
    - CXXFLAGS : C++ 컴파일러 플래그
    - LDFLAGS : 링커 플래그
    - CPPFLAGS : C 전처리기 플래그. C와 C++에 모두 사용
    
- 내장 규칙
    
    ```makefile
    %.o: %.c
    	$(CC) $(TARGET_ARCH) $(CPPFLAGS) $(CFLAGS) -o $@ -c $&lt;
    %.o: %.cpp
    	$(CXX) $(TARGET_ARCH) $(CPPFLAGS) $(CXXFLAGS) -o $@ -c $&lt;
    %: %.o
    	$(CC) $(TARGET_ARCH) $(LOADLIBES) $(LDLIBS) $(LDFLAGS) -o $@ $^
    ```
    
    이런 내장 규칙을 활용해서 Makefile의 길이를 쉽게 줄일 수 있다.
    
    ---
    
    **.PHONY 규칙**
    
    무언가를 만들려는 건 아니지만 자주 쓰는 명령어를 make에 alias처럼 등록해서 쓸 수 있다.
    
    ```makefile
    clean:
    	rm -f *.o
    ```
    
    하지만 이렇게 쓰는 경우에는 clean이라는 파일이 있으면 make clean이 아무것도 실행하지 않는다.
    
    이런 문제를 해결하기 위해 clean을 가짜를 의미하는 .PHONY 타겟으로 지정할 수 있다.
    
    ```makefile
    .PHONY: clean
    clean:
    	rm -f *.o
    ```
    
    이렇게 clean을 .PHONY 타겟으로 지정하면 clean이라는 파일이 있어도 make clean이 의도대로 동작한다.
    
    ---
    
    **매크로 치환(Macro substitution)**
    
    필요에 의해 매크로의 내용을 조금 바꾸어야 할 때가 있다. 매크로 내용의 일부만 바꾸기 위해서는 $(MACRO_NAME:OLD=NEW)와 같은 형식을 이용하면 된다.
    
    ```makefile
    MY_NAME = Michael Jackson
    YOUR_NAME = $(NAME: Jack=Jook)
    ```
    
    위의 예제에서는 Jack이란 부분이 Jook으로 바뀌게 된다. 즉 YOUR_NAME이란 매크로의 값은 Michael Jookson이 된다.
    
    ```makefile
    OBJS = main.o read.o write.o
    SRCS = $(OBJS:.o=.c)
    ```
    
    **(*****OBJS : .o = .c처럼 예쁘게 쓰려고 띄어쓰지 말자. 띄어쓰면 변환안돼서 개고생한다..)**
    
    위의 예제에서는 OBJS에서 .c가 .o로 바뀌게 된다. 즉 아래와 같다.
    
    ```makefile
    SRCS = main.c read.c write.c
    ```
    
</aside>

<h2 id="reference"><strong>📬 Reference</strong></h2>
<p><a href="http://doc.kldp.org/KoreanDoc/html/GNU-Make/GNU-Make.html#toc3">GNU Make 강좌</a></p>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="42Seoul" /><category term="42Seoul" /><category term="Makefile" /><summary type="html"><![CDATA[의존성 관리 및 빌드 과정을 편하게 해주는 Makefile에 대해 알아보자.]]></summary></entry><entry><title type="html">Test post</title><link href="http://localhost:4000/test/test-post/" rel="alternate" type="text/html" title="Test post" /><published>2023-10-15T00:00:00+09:00</published><updated>2023-10-15T00:00:00+09:00</updated><id>http://localhost:4000/test/test-post</id><content type="html" xml:base="http://localhost:4000/test/test-post/"><![CDATA[]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="Test" /><category term="Test" /><summary type="html"><![CDATA[testing issue]]></summary></entry><entry><title type="html">github first post</title><link href="http://localhost:4000/algorithm/first-post/" rel="alternate" type="text/html" title="github first post" /><published>2023-10-11T00:00:00+09:00</published><updated>2023-10-11T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/first-post</id><content type="html" xml:base="http://localhost:4000/algorithm/first-post/"><![CDATA[<h1 id="블로그-첫-포스팅제목">블로그 첫 포스팅(제목)</h1>

<h2 id="부제목">부제목</h2>

<h1 id="글머리1">글머리1</h1>

<h2 id="글머리2">글머리2</h2>

<blockquote>
  <p>blockquote
	&gt; blockquote2
	&gt;	&gt; blockquote3</p>
</blockquote>

<ol>
  <li>첫번째</li>
  <li>두번째</li>
</ol>

<ul>
  <li>a</li>
  <li>b</li>
  <li>c</li>
</ul>

<p>this is a normal paragraph:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>this is a code block.
</code></pre></div></div>

<p>end code block.</p>

<p>second code block method</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"hello world!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>링크
<!-- 주석 내용-->
// code
Link: <a href="https://google.com" title="Go google">Google</a></p>

<p>// code2
<a href="https://google.com," title="google link">Google</a></p>

<p>//code3</p>
<ul>
  <li>외부링크: <a href="http://example.com/">http://example.com/</a></li>
  <li>이메일링크: <a href="mailto:address@example.com">address@example.com</a></li>
</ul>

<!-- 강조 -->
<p><em>single asterisks</em>
<em>single asterisks second</em>
<strong>double asterisks</strong>
<strong>double asterisks second</strong>
<u>single underscores</u>
<del>cancel line</del></p>

<ul>
  <li>줄 바꿈을 하기 위해서는 문장 마지막에서 3칸 이상을 띄어쓰기 해야 한다. <br />
이렇게</li>
</ul>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="Algorithm" /><category term="Algorithm" /><summary type="html"><![CDATA[Github Blog글을 처음 써보며.]]></summary></entry></feed>