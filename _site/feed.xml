<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-06-30T15:02:41+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hyuim’s blog</title><subtitle>Hyuim&apos;s personal blog.</subtitle><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><entry><title type="html">09.무선 랜</title><link href="http://localhost:4000/network/network09/" rel="alternate" type="text/html" title="09.무선 랜" /><published>2023-12-23T00:00:00+09:00</published><updated>2023-12-23T00:00:00+09:00</updated><id>http://localhost:4000/network/network09</id><content type="html" xml:base="http://localhost:4000/network/network09/"><![CDATA[<h1 id="1-무선-랜">1. 무선 랜</h1>

<p>무선 랜은 <code class="language-plaintext highlighter-rouge">WAP(Wireless Access Point)</code>와 <code class="language-plaintext highlighter-rouge">무선 클라이언트(컴퓨터나 스마트폰 등)</code>로 구성된다.
컴퓨터가 WAP(무선 공유기)와 통신하려면 무선 랜 칩(chip)과 무선 랜 어댑터(adapter)가 필요하다.
무선 랜 어댑터는 USB 메모리 방식과 컴퓨터 카드 방식이 있다.</p>

<h1 id="2-무선-랜-연결-방식">2. 무선 랜 연결 방식</h1>

<ol>
  <li>infrastructure : WAP를 통해 통신하는 방식</li>
  <li>Ad Hoc : 무선 클라이언트끼리 직접 통신하는 방식</li>
</ol>

<h1 id="3-ssid">3. SSID</h1>

<p>무선 액세스 포인트와 무선 클라이언트를 연결하려면 혼선을 피하기 위해 <code class="language-plaintext highlighter-rouge">SSID</code>라는 액세스 포인트의 고유 이름을 사용해야 한다. 또한 무선 클라이언트가 자동으로 무선 액세스 포인트를 찾아 통신할 수 있기 위해 네트워크 이름, 인증, 암호화, 암호화 키를 설정해야 한다.
무선 액세스 포인트는 <code class="language-plaintext highlighter-rouge">beacon</code>이라고 하는 자기를 알리는 신호를 네트워크에 있는 모든 기기에 주기적으로 전송한다. 무선 클라이언트는 이 신호를 받은 후 자신의 SSID와 같은지 WAP에 문의한다. 같은 SSID의 WAP이 응답을 하고 서로의 존재를 알게 되면, 인증 방식이 올바른지 확인하고 무선 클라이언트는 WAP에 연결을 요청한다. WAP으로 부터 승인을 받으면 연결하여 통신을 할 수 있게 된다.</p>

<h1 id="4-채널">4. 채널</h1>

<p>WAP과 무선 클라이언트 사이의 거리가 멀수록 전파가 약해져 접속이 잘 안되거나 통신 속도가 느려진다. 이러한 이유로 WAP을 여러 대 설치해야한다. 무선 랜은 여러 기기를 동시에 연결할 수 있도록 주파수 대역을 분할하는데, 그 주파수 대역을 <code class="language-plaintext highlighter-rouge">채널</code>이라고 부른다. 공유기와 컴퓨터가 연결되려면 두 기기 모두 같은 채널을 설정해야 한다. 반면 공유기끼리는 다른 채널을 설정해야 한다. 다른 채널끼리는 주파수가 서로 다르기 때문에 전파가 겹치더라도 서로 간섭이 일어나지 않고 통신 속도도 떨어지지 않는다.
전파가 겹치는 무선 공유기들이 같은 채널로 설정되어 있으면 주파수가 서로 겹치면서 <code class="language-plaintext highlighter-rouge">전파 간섭</code>이 생기고 통신 속도가 느려진다.</p>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="Network" /><category term="LAN" /><category term="Push_Swap" /><category term="SSID" /><category term="Channel" /><category term="beacon" /><summary type="html"><![CDATA[무선 랜에 대해 알아보자.]]></summary></entry><entry><title type="html">07.응용 계층</title><link href="http://localhost:4000/network/network07/" rel="alternate" type="text/html" title="07.응용 계층" /><published>2023-12-23T00:00:00+09:00</published><updated>2023-12-23T00:00:00+09:00</updated><id>http://localhost:4000/network/network07</id><content type="html" xml:base="http://localhost:4000/network/network07/"><![CDATA[<h1 id="1-응용-계층의-역할">1. 응용 계층의 역할</h1>

<p>서비스를 제공하는 측을 <code class="language-plaintext highlighter-rouge">서버</code>, 서비스를 요청하는 측에서 사용하는 프로그램을 <code class="language-plaintext highlighter-rouge">클라이언트</code>라고 한다.
이런 어플리케이션은 응용 계층에서 동작한다(여기서 응용 계층은 5계층의 세션 계층과 6계층의 표현 계층을 포함하는 의미).
응용 계층에서는 클라이언트의 요청을 서버 프로그램이 이해할 수 있는 데이터로 변환하고 전송한다.
클라이언트 측 어플리케이션과 서버 측 어플리케이션이 통신해야 하기 때문에 여기서도 프로토콜이 필요하다.</p>

<p>응용 계층의 대표적인 프로토콜 종류</p>
<ol>
  <li>HTTP : 웹사이트 접속</li>
  <li>FTP : 파일 전송</li>
  <li>SMTP : 메일 송신</li>
  <li>POP3 : 메일 수신</li>
  <li>DNS : 이름 해석(컴퓨터나 네트워크 장비에 붙여진 이름을 기반으로 IP 주소를 알아내는 것)</li>
</ol>

<h1 id="2-world-wide-webwww">2. World Wide Web(www)</h1>

<p>W3나 Web이라고도 불린다.
www에는 다음 3가지 기술이 사용된다.</p>

<ol>
  <li>HTML : 
  웹 페이지에서 문장 구조나 문자를 꾸미는 태그를 사용하여 작성하는 마크업 언어. 하이퍼링크를 사용할 수 있다. 이동한 사이트에 글과 그림이 있다면, 클라이언트는 글과 그림을 따로 요청하기 때문에 가끔 글이 먼저 보이고 그림이 나중에 보이는 경우가 발생한다.</li>
  <li>URL :
인터넷에서 파일 위치를 지정하기 위해 기술된 주소. 웹 사이트 주소를 지정하기 위해 사용된다.</li>
  <li>HTTP : 
  클라이언트는 웹 사이트를 보기 위해 웹 서버의 80번 포트를 통해 HTTP 통신을 한다. 클라이언트에서 index.html을 달라는 HTTP 요청을 보내면, 서버에서 HTTP 응답을 반환하고 index.html을 클라이언트에게 보낸다. 이전에는 요청이 있을 때마다 연결을 수립하고 해당 요청 처리 후 바로 연결을 끊었지만, HTTP/1.1 버전부터 keepalive 기능이 추가되어서 한번 연결을 수립하면 필요한 모든 요청을 처리 후 연결을 끊을 수 있게 되었기 때문에 효율이 상승했다.</li>
</ol>

<h1 id="3-domain-name">3. Domain name</h1>

<p>일반적으로 서버 컴퓨터에 접속하려면 서버 컴퓨터의 IP 주소를 알아야 하는데, 우리는 웹 브라우저 주소창에 www.google.com을 입력해도 구글 서버 컴퓨터로부터 정보를 받아올 수 있다.
<code class="language-plaintext highlighter-rouge">DNS</code>는 이처럼 URL을 IP 주소로 변환(이름 해석)해주는 시스템이다.
www.google.com을 컴퓨터나 네트워크를 식별하기 위해 붙여진 이름 즉 <code class="language-plaintext highlighter-rouge">도메인 이름</code>이라고 한다. 도메인 이름 앞에 있는 www는 <code class="language-plaintext highlighter-rouge">호스트 이름(서버 이름)</code>이다.
컴퓨터에서 www.google.com에 접속하려고 하면 컴퓨터는 우선 DNS 서버에 가서 www.google.com의 IP 주소를 요청한다. 이후 DNS 서버에서 해당 IP 주소를 넘겨주면 컴퓨터는 해당 IP 주소로 접속한다.
DNS 서버는 전 세계에 계층적으로 연결되어 있기 때문에 만약 컴퓨터가 요청한 첫번째 DNS 서버가 IP 주소를 모른다면, 첫번째 DNS 서버가 두번째 DNS 서버에게 IP 주소를 요청해서 이를 사용자 컴퓨터에게 전달한다.</p>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="Network" /><category term="HTTP" /><category term="DNS" /><category term="www" /><summary type="html"><![CDATA[OSI 모델의 응용 계층에 대해 알아 보자.]]></summary></entry><entry><title type="html">09.무선 랜</title><link href="http://localhost:4000/network/network09/" rel="alternate" type="text/html" title="09.무선 랜" /><published>2023-12-23T00:00:00+09:00</published><updated>2023-12-23T00:00:00+09:00</updated><id>http://localhost:4000/network/network09</id><content type="html" xml:base="http://localhost:4000/network/network09/"><![CDATA[<h1 id="1-무선-랜">1. 무선 랜</h1>

<p>무선 랜은 <code class="language-plaintext highlighter-rouge">WAP(Wireless Access Point)</code>와 <code class="language-plaintext highlighter-rouge">무선 클라이언트(컴퓨터나 스마트폰 등)</code>로 구성된다.
컴퓨터가 WAP(무선 공유기)와 통신하려면 무선 랜 칩(chip)과 무선 랜 어댑터(adapter)가 필요하다.
무선 랜 어댑터는 USB 메모리 방식과 컴퓨터 카드 방식이 있다.</p>

<h1 id="2-무선-랜-연결-방식">2. 무선 랜 연결 방식</h1>

<ol>
  <li>infrastructure : WAP를 통해 통신하는 방식</li>
  <li>Ad Hoc : 무선 클라이언트끼리 직접 통신하는 방식</li>
</ol>

<h1 id="3-ssid">3. SSID</h1>

<p>무선 액세스 포인트와 무선 클라이언트를 연결하려면 혼선을 피하기 위해 <code class="language-plaintext highlighter-rouge">SSID</code>라는 액세스 포인트의 고유 이름을 사용해야 한다. 또한 무선 클라이언트가 자동으로 무선 액세스 포인트를 찾아 통신할 수 있기 위해 네트워크 이름, 인증, 암호화, 암호화 키를 설정해야 한다.
무선 액세스 포인트는 <code class="language-plaintext highlighter-rouge">beacon</code>이라고 하는 자기를 알리는 신호를 네트워크에 있는 모든 기기에 주기적으로 전송한다. 무선 클라이언트는 이 신호를 받은 후 자신의 SSID와 같은지 WAP에 문의한다. 같은 SSID의 WAP이 응답을 하고 서로의 존재를 알게 되면, 인증 방식이 올바른지 확인하고 무선 클라이언트는 WAP에 연결을 요청한다. WAP으로 부터 승인을 받으면 연결하여 통신을 할 수 있게 된다.</p>

<h1 id="4-채널">4. 채널</h1>

<p>WAP과 무선 클라이언트 사이의 거리가 멀수록 전파가 약해져 접속이 잘 안되거나 통신 속도가 느려진다. 이러한 이유로 WAP을 여러 대 설치해야한다. 무선 랜은 여러 기기를 동시에 연결할 수 있도록 주파수 대역을 분할하는데, 그 주파수 대역을 <code class="language-plaintext highlighter-rouge">채널</code>이라고 부른다. 공유기와 컴퓨터가 연결되려면 두 기기 모두 같은 채널을 설정해야 한다. 반면 공유기끼리는 다른 채널을 설정해야 한다. 다른 채널끼리는 주파수가 서로 다르기 때문에 전파가 겹치더라도 서로 간섭이 일어나지 않고 통신 속도도 떨어지지 않는다.
전파가 겹치는 무선 공유기들이 같은 채널로 설정되어 있으면 주파수가 서로 겹치면서 <code class="language-plaintext highlighter-rouge">전파 간섭</code>이 생기고 통신 속도가 느려진다.</p>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="Network" /><category term="LAN" /><category term="Push_Swap" /><category term="SSID" /><category term="Channel" /><category term="beacon" /><summary type="html"><![CDATA[무선 랜에 대해 알아보자.]]></summary></entry><entry><title type="html">08.OSI 모델</title><link href="http://localhost:4000/network/network08/" rel="alternate" type="text/html" title="08.OSI 모델" /><published>2023-12-23T00:00:00+09:00</published><updated>2023-12-23T00:00:00+09:00</updated><id>http://localhost:4000/network/network08</id><content type="html" xml:base="http://localhost:4000/network/network08/"><![CDATA[<h1 id="1-osi-모델의-각-계층">1. OSI 모델의 각 계층</h1>

<ol>
  <li>응용 계층(세션 계층 + 표현 계층) : 어플리케이션 등에서 사용하는 데이터를 송수신하는 데 필요하다.</li>
  <li>전송 계층 : 목적지에 데이터를 정확하게 전달하는 데 필요하다.</li>
  <li>네트워크 계층 : 다른 네트워크에 있는 목적지에 데이터를 전달하는 데 필요하다.</li>
  <li>데이터 링크 계층 : 랜에서 데이터를 송수신하는 데 피룡하다.</li>
  <li>물리 계층 : 데이터를 전기 신호로 변환하는 데 필요하다.</li>
</ol>

<p>컴퓨터에서 데이터를 보낼 때, 7계층을 내려가며 캡슐화가 되고 목적지인 컴퓨터에 도착하면 7계층을 올라가며 역캡슐화가 된다.
스위치에서는 데이터 링크 계층까지, 라우터에서는 네트워크 계층까지 올라가며 역캡슐화가 됐다가 다시 내려오며 캡슐화가 된다.</p>

<h1 id="2-컴퓨터의-데이터가-전기-신호로-변환되는-과정">2. 컴퓨터의 데이터가 전기 신호로 변환되는 과정</h1>

<ol>
  <li><code class="language-plaintext highlighter-rouge">응용 계층</code>에서 3-way handshake로 connection이 확립된다.</li>
  <li>웹 브라우저에서 url을 입력하여 접속하면 html 데이터를 보내달라는 데이터(요청)가 생성된다.</li>
  <li><code class="language-plaintext highlighter-rouge">전송 계층</code>에서 TCP 헤더(출발지 포트 번호, 목적지 포트 번호가 들어 있다)가 붙는다. 즉, <strong>세그먼트</strong>가 된다.</li>
  <li><code class="language-plaintext highlighter-rouge">네트워크 계층</code>에서 세그먼트에 IP 헤더(출발지 IP, 목적지 IP 주소가 붙어 있다)가 붙는다. 즉, <strong>IP 패킷</strong>이 된다.</li>
  <li><code class="language-plaintext highlighter-rouge">데이터 링크 계층</code>에서 이더넷 헤더와 트레일러가 붙는다. 즉, <strong>이더넷 프레임</strong>이 된다.</li>
  <li><code class="language-plaintext highlighter-rouge">물리 계층</code>에서 랜카드에 의해 <strong>전기 신호</strong>로 변환되어 네트워크로 전송된다.</li>
</ol>

<p>전기 신호를 받아 데이터로 변환하여 어플리케이션에 전달하는 과정은 위 과정의 역순이다.</p>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="Network" /><category term="OSI" /><summary type="html"><![CDATA[OSI 모델의 전반적인 흐름에 대해 알아보자.]]></summary></entry><entry><title type="html">07.응용 계층</title><link href="http://localhost:4000/network/network07/" rel="alternate" type="text/html" title="07.응용 계층" /><published>2023-12-23T00:00:00+09:00</published><updated>2023-12-23T00:00:00+09:00</updated><id>http://localhost:4000/network/network07</id><content type="html" xml:base="http://localhost:4000/network/network07/"><![CDATA[<h1 id="1-응용-계층의-역할">1. 응용 계층의 역할</h1>

<p>서비스를 제공하는 측을 <code class="language-plaintext highlighter-rouge">서버</code>, 서비스를 요청하는 측에서 사용하는 프로그램을 <code class="language-plaintext highlighter-rouge">클라이언트</code>라고 한다.
이런 어플리케이션은 응용 계층에서 동작한다(여기서 응용 계층은 5계층의 세션 계층과 6계층의 표현 계층을 포함하는 의미).
응용 계층에서는 클라이언트의 요청을 서버 프로그램이 이해할 수 있는 데이터로 변환하고 전송한다.
클라이언트 측 어플리케이션과 서버 측 어플리케이션이 통신해야 하기 때문에 여기서도 프로토콜이 필요하다.</p>

<p>응용 계층의 대표적인 프로토콜 종류</p>
<ol>
  <li>HTTP : 웹사이트 접속</li>
  <li>FTP : 파일 전송</li>
  <li>SMTP : 메일 송신</li>
  <li>POP3 : 메일 수신</li>
  <li>DNS : 이름 해석(컴퓨터나 네트워크 장비에 붙여진 이름을 기반으로 IP 주소를 알아내는 것)</li>
</ol>

<h1 id="2-world-wide-webwww">2. World Wide Web(www)</h1>

<p>W3나 Web이라고도 불린다.
www에는 다음 3가지 기술이 사용된다.</p>

<ol>
  <li>HTML : 
  웹 페이지에서 문장 구조나 문자를 꾸미는 태그를 사용하여 작성하는 마크업 언어. 하이퍼링크를 사용할 수 있다. 이동한 사이트에 글과 그림이 있다면, 클라이언트는 글과 그림을 따로 요청하기 때문에 가끔 글이 먼저 보이고 그림이 나중에 보이는 경우가 발생한다.</li>
  <li>URL :
인터넷에서 파일 위치를 지정하기 위해 기술된 주소. 웹 사이트 주소를 지정하기 위해 사용된다.</li>
  <li>HTTP : 
  클라이언트는 웹 사이트를 보기 위해 웹 서버의 80번 포트를 통해 HTTP 통신을 한다. 클라이언트에서 index.html을 달라는 HTTP 요청을 보내면, 서버에서 HTTP 응답을 반환하고 index.html을 클라이언트에게 보낸다. 이전에는 요청이 있을 때마다 연결을 수립하고 해당 요청 처리 후 바로 연결을 끊었지만, HTTP/1.1 버전부터 keepalive 기능이 추가되어서 한번 연결을 수립하면 필요한 모든 요청을 처리 후 연결을 끊을 수 있게 되었기 때문에 효율이 상승했다.</li>
</ol>

<h1 id="3-domain-name">3. Domain name</h1>

<p>일반적으로 서버 컴퓨터에 접속하려면 서버 컴퓨터의 IP 주소를 알아야 하는데, 우리는 웹 브라우저 주소창에 www.google.com을 입력해도 구글 서버 컴퓨터로부터 정보를 받아올 수 있다.
<code class="language-plaintext highlighter-rouge">DNS</code>는 이처럼 URL을 IP 주소로 변환(이름 해석)해주는 시스템이다.
www.google.com을 컴퓨터나 네트워크를 식별하기 위해 붙여진 이름 즉 <code class="language-plaintext highlighter-rouge">도메인 이름</code>이라고 한다. 도메인 이름 앞에 있는 www는 <code class="language-plaintext highlighter-rouge">호스트 이름(서버 이름)</code>이다.
컴퓨터에서 www.google.com에 접속하려고 하면 컴퓨터는 우선 DNS 서버에 가서 www.google.com의 IP 주소를 요청한다. 이후 DNS 서버에서 해당 IP 주소를 넘겨주면 컴퓨터는 해당 IP 주소로 접속한다.
DNS 서버는 전 세계에 계층적으로 연결되어 있기 때문에 만약 컴퓨터가 요청한 첫번째 DNS 서버가 IP 주소를 모른다면, 첫번째 DNS 서버가 두번째 DNS 서버에게 IP 주소를 요청해서 이를 사용자 컴퓨터에게 전달한다.</p>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="Network" /><category term="HTTP" /><category term="DNS" /><category term="www" /><summary type="html"><![CDATA[OSI 모델의 응용 계층에 대해 알아 보자.]]></summary></entry><entry><title type="html">08.OSI 모델</title><link href="http://localhost:4000/network/network08/" rel="alternate" type="text/html" title="08.OSI 모델" /><published>2023-12-23T00:00:00+09:00</published><updated>2023-12-23T00:00:00+09:00</updated><id>http://localhost:4000/network/network08</id><content type="html" xml:base="http://localhost:4000/network/network08/"><![CDATA[<h1 id="1-osi-모델의-각-계층">1. OSI 모델의 각 계층</h1>

<ol>
  <li>응용 계층(세션 계층 + 표현 계층) : 어플리케이션 등에서 사용하는 데이터를 송수신하는 데 필요하다.</li>
  <li>전송 계층 : 목적지에 데이터를 정확하게 전달하는 데 필요하다.</li>
  <li>네트워크 계층 : 다른 네트워크에 있는 목적지에 데이터를 전달하는 데 필요하다.</li>
  <li>데이터 링크 계층 : 랜에서 데이터를 송수신하는 데 피룡하다.</li>
  <li>물리 계층 : 데이터를 전기 신호로 변환하는 데 필요하다.</li>
</ol>

<p>컴퓨터에서 데이터를 보낼 때, 7계층을 내려가며 캡슐화가 되고 목적지인 컴퓨터에 도착하면 7계층을 올라가며 역캡슐화가 된다.
스위치에서는 데이터 링크 계층까지, 라우터에서는 네트워크 계층까지 올라가며 역캡슐화가 됐다가 다시 내려오며 캡슐화가 된다.</p>

<h1 id="2-컴퓨터의-데이터가-전기-신호로-변환되는-과정">2. 컴퓨터의 데이터가 전기 신호로 변환되는 과정</h1>

<ol>
  <li><code class="language-plaintext highlighter-rouge">응용 계층</code>에서 3-way handshake로 connection이 확립된다.</li>
  <li>웹 브라우저에서 url을 입력하여 접속하면 html 데이터를 보내달라는 데이터(요청)가 생성된다.</li>
  <li><code class="language-plaintext highlighter-rouge">전송 계층</code>에서 TCP 헤더(출발지 포트 번호, 목적지 포트 번호가 들어 있다)가 붙는다. 즉, <strong>세그먼트</strong>가 된다.</li>
  <li><code class="language-plaintext highlighter-rouge">네트워크 계층</code>에서 세그먼트에 IP 헤더(출발지 IP, 목적지 IP 주소가 붙어 있다)가 붙는다. 즉, <strong>IP 패킷</strong>이 된다.</li>
  <li><code class="language-plaintext highlighter-rouge">데이터 링크 계층</code>에서 이더넷 헤더와 트레일러가 붙는다. 즉, <strong>이더넷 프레임</strong>이 된다.</li>
  <li><code class="language-plaintext highlighter-rouge">물리 계층</code>에서 랜카드에 의해 <strong>전기 신호</strong>로 변환되어 네트워크로 전송된다.</li>
</ol>

<p>전기 신호를 받아 데이터로 변환하여 어플리케이션에 전달하는 과정은 위 과정의 역순이다.</p>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="Network" /><category term="OSI" /><summary type="html"><![CDATA[OSI 모델의 전반적인 흐름에 대해 알아보자.]]></summary></entry><entry><title type="html">05.네트워크 계층</title><link href="http://localhost:4000/network/network05/" rel="alternate" type="text/html" title="05.네트워크 계층" /><published>2023-12-20T00:00:00+09:00</published><updated>2023-12-20T00:00:00+09:00</updated><id>http://localhost:4000/network/network05</id><content type="html" xml:base="http://localhost:4000/network/network05/"><![CDATA[<h1 id="1-다른-네트워크-간의-통신">1. 다른 네트워크 간의 통신</h1>

<p><code class="language-plaintext highlighter-rouge">네트워크 계층</code>에서는 네트워크 간의 통신을 가능하게 한다. 같은 네트워크 상의 컴퓨터로 정보를 전달할 때는 Ethernet과 스위치를 통해 소통이 가능했지만, 다른 네트워크 상의 컴퓨터로 데이터를 보내려면 MAC주소 외에 네트워크 주소가 추가로 필요하다.
네트워크를 식별하는 데 사용되는 주소를 <code class="language-plaintext highlighter-rouge">IP 주소</code>라고 한다. IP(Internet Protocol)는 네트워크 계층에서 사용되는 프로토콜이다. 네트워크 계층에서 다른 네트워크로 데이터를 전송하기 위해 <code class="language-plaintext highlighter-rouge">라우터(router)</code>라는 장비가 필요하다. 라우터는 데이터가 목적지까지 가는데 최적의 경로를 알려주는 역할을 한다. 이처럼 목적지 IP주소까지 어떤 경로로 데이터를 보낼지 결정하는 것을 <code class="language-plaintext highlighter-rouge">라우팅(routing)</code>이라고 한다. 라우터에는 <code class="language-plaintext highlighter-rouge">라우팅 테이블(routing table)</code>이 있어서 경로 정보를 등록하고 관리한다.
네트워크 계층에서 데이터를 캡슐화할 때, 데이터 앞에 IP 헤더를 붙인다.</p>

<p><code class="language-plaintext highlighter-rouge">라우터</code> : 서로 다른 네트워크를 연결해 주는 장치
<code class="language-plaintext highlighter-rouge">라우팅 테이블</code> : 컴퓨터 네트워크에서 목적지 주소를 목적지에 도달하기 위한 네트워크 노선으로 변환시킬 목적으로 사용되는 정보.
<code class="language-plaintext highlighter-rouge">라우팅</code> : 패킷을 목적지 컴퓨터까지 보낼 때 최적의 경로를 선택하여 전송하는 것
<code class="language-plaintext highlighter-rouge">정적 라우팅</code> : 관리자가 미리 라우팅 테이블에 경로를 수동으로 추가하는 방법. 목적지까지의 경로를 고정하거나 목적지까지의 경로가 하나로 한정되는 경우에 사용한다.
<code class="language-plaintext highlighter-rouge">동적 라우팅</code> : 네트워크 변경을 자동으로 감지하여 라우팅 테이블을 업데이트하거나 네트워크 장애가 발생했을 때 라우터끼리 정보를 교환하여 최적의 경로로 전환하는 방법이다. 관리자는 정적 라우팅처럼 라우팅 테이블에 경로를 수동으로 추가할 필요가 없다.</p>

<h1 id="2-ip-주소">2. IP 주소</h1>

<p>IP 주소는 ISP(인터넷 서비스 제공자)에게 받을 수 있다.</p>

<p>IP는 2가지 버전이 있다.</p>
<ul>
  <li>IPv4 : 32비트</li>
  <li>IPv6 : 128비트</li>
</ul>

<p>IPv4는 32비트이기 때문에 표현할 수 있는 주소에 한계가 있어서 IPv6가 등장하게 되었다.
IPv4로 표현할 수 있는 주소가 현재 필요로 하는 IP 주소의 수보다 부족하기 때문에 현재는 <code class="language-plaintext highlighter-rouge">공인 IP 주소</code>와 <code class="language-plaintext highlighter-rouge">사설 IP 주소</code>를 사용하고 있다.
참고로 공인 IP 주소는 ISP가 제공한다.</p>

<ul>
  <li>공인 IP 주소 : 인터넷에 직접 연결되는 컴퓨터나 라우터에 할당</li>
  <li>사설 IP 주소 : 회사나 가정의 랜에 있는 컴퓨터에 할당</li>
</ul>

<p>비트로 인한 IP 주소 수의 한계를 극복하기 위해 공인 IP는 라우터에 할당하고, 각 컴퓨터에는 랜의 네트워크 관리자가 자유롭게 사설 IP 주소를 할당하거나 라우터의 DHCP 기능을 사용하여 주소를 자동으로 할당한다.
이런 식으로 IP를 사용하면 공인 IP 주소를 절약할 수 있다. 사설 IP 주소는 한 네트워크 내에서 배정하는 주소기 때문에 서로 다른 네트워크 끼리는 중복이 될 수 있다.</p>

<p>IP 주소를 표시할 때, 사람이 읽기 편하도록 8비트 단위로 나눠서 표시하는데, 이를 <code class="language-plaintext highlighter-rouge">옥텟(octet)</code>이라고 한다.</p>

<p>ex. 11000100 11100100 000011000 00000010 -&gt; 4개의 옥텟
이를 더 읽기 편하도록 10진수로 변환하여 표시하기도 한다.
=&gt; 136.196.24.2</p>

<p>IP 주소는 <code class="language-plaintext highlighter-rouge">네트워크 주소</code>와 <code class="language-plaintext highlighter-rouge">호스트 주소</code>로 구성되어 있다.
네트워크 주소는 어떤 네트워크인지를 나타내며, 호스트 주소는 해당 네트워크의 어떤 컴퓨터인지를 나타낸다.</p>

<p>IP 주소는 A~E 클래스로 구분하며 일반적으로는 A~C 클래스를 사용한다.
A 클래스는 처음 1 옥텟을 네트워크 ID, 나머지 3 옥텟을 호스트 ID로 사용한다.
B 클래스는 처음 2 옥텟을 네트워크 ID, 나머지 2 옥텟을 호스트 ID로 사용하며
C 클래스는 처음 3 옥텟을 네트워크 ID, 나머지 1 옥텟을 호스트 ID로 사용한다.</p>

<p>A 클래스에서 네트워크 ID의 범위는 00000001 ~ 01111111이며,
B 클래스에서 네트워크 ID의 범위는 10000000 00000000 ~ 10111111 11111111,
C 클래스에서 네트워크 ID의 범위는 11000000 00000000 00000000 ~ 11011111 11111111 11111111이다.</p>

<p><code class="language-plaintext highlighter-rouge">네트워크 주소</code>를 표현할 때, 호스트 주소에 해당하는 비트는 0으로 채워 놓는다.
A 클래스 네트워크의 경우, 마지막 옥텟이 호스트 주소에 해당하므로 네트워크 주소가 192.168.1에 해당하는 경우를 예를 들면 다음과 같이 표현할 수 있다.
ex. 192.168.1.0</p>

<p><code class="language-plaintext highlighter-rouge">브로드캐스트 주소</code>는 해당 네트워크에 존재하는 모든 컴퓨터에 한번에 데이터를 전송할 때 사용하는 주소이다.
브로드 캐스트 주소는 호스트 주소에 해당하는 비트를 전부 1로 채워 놓는다.
192.168.1에 해당하는 네트워크의 경우, 다음과 같다.
ex. 192.168.1.255</p>

<h1 id="3-subnet">3. Subnet</h1>

<p>분할된 네트워크를 말하며, 네트워크를 분할하는 것을 subneting이라고 한다. 서브넷팅을 할 때, 호스트 ID에 해당하는 비트를 서브넷 ID로 사용한다. 따라서 “네트워크 ID + 호스트 ID”였던 구성이 “네트워크 ID + 서브넷 ID + 호스트 ID”로 바뀐다. 이렇게 서브넷 ID까지 사용하면 네트워크 ID가 어디까지인지 구분하기 힘들어진다. 이 때 이를 구분하기 위해 <code class="language-plaintext highlighter-rouge">Subnet Mask</code>라는 것을 사용한다.</p>

<p>서브넷 마스크는 네트워크 ID를 알아내기 위한 수단으로, A 클래스의 경우 처음 1옥텟이 네트워크 ID이므로 255.0.0.0, B 클래스의 경우 255.255.0.0, C 클래스의 경우 255.255.255.0이 된다. 이를 prefix 표기법으로도 표현할 수 있는데, 각각은 /8, /16, /24가 된다. 슬래쉬 이후에 몇 비트를 네트워크 ID로 표현하는 지를 나타낸다.</p>

<p>자신의 IP 주소와 서브넷 마스크를 &amp;연산(비트 연산)하면 네트워크 ID를 구할 수 있다.</p>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="Network" /><category term="Network" /><category term="Subnet" /><category term="IP" /><summary type="html"><![CDATA[OSI 모델의 3계층인 네트워크 계층에 대해 알아보자.]]></summary></entry><entry><title type="html">04.데이터 링크 계층</title><link href="http://localhost:4000/network/network04/" rel="alternate" type="text/html" title="04.데이터 링크 계층" /><published>2023-12-20T00:00:00+09:00</published><updated>2023-12-20T00:00:00+09:00</updated><id>http://localhost:4000/network/network04</id><content type="html" xml:base="http://localhost:4000/network/network04/"><![CDATA[<h1 id="1-ethernet">1. Ethernet</h1>

<p>OSI 모델의 2계층인 데이터 링크 계층에서는 네트워크 장비 간에 신호를 주고 받는 규칙을 정한다. 이 때 가장 많이 사용되는 규칙이 <code class="language-plaintext highlighter-rouge">Ethernet</code>이다. 즉, LAN에서 데이터를 어떻게 주고받을 지에 대한 약속이다.
허브에 3개의 컴퓨터가 연결되어 있다고 가정하자. 만약 컴퓨터 1에서 컴퓨터 3에 데이터를 보내기 위해 허브에 데이터를 전달하면, 허브는 컴퓨터 2와 3 모두에 데이터를 보낸다.
이 때 데이터에는 목적지 주소가 포함되어 있어 목적지가 아닌 컴퓨터 2에서는 데이터를 받은 후 파기한다.</p>

<p>만약 컴퓨터 여러 대에서 동시에 데이터를 보내게 되면 충돌이 일어날 수 있다. 이를 방지하기 위해 Ethernet은 CSMA/CD 방법을 사용한다.</p>

<ul>
  <li>CS : 데이터를 보내려는 컴퓨터의 케이블에 전류가 흐르고 있는지 확인</li>
  <li>MA : 전류가 흐르고 있지 않다면 데이터를 송신</li>
  <li>CD : 충돌이 일어나는 지 확인</li>
</ul>

<p>현재는 효율이 좋지 않아 CSMA/CD 방식을 잘 사용하지 않고, 대신 <code class="language-plaintext highlighter-rouge">switch</code> 네트워크 장비를 사용한다.</p>

<h1 id="2-mac-주소">2. MAC 주소</h1>

<p>비트를 전기 신호로 변환하는 LAN 카드는 각각 고유한 <code class="language-plaintext highlighter-rouge">MAC 주소</code>를 가지고 있다. MAC 주소는 6바이트로 이루어져 있으며 앞의 3바이트는 제조사 번호, 뒤의 3바이트는 제조사에서 붙인 일련번호를 의미한다.
OSI 모델의 데이터 링크 계층, TCP/IP 모델의 네트워크 계층에서는 LAN 카드로 데이터를 전송하기 전에 <code class="language-plaintext highlighter-rouge">헤더</code>와 <code class="language-plaintext highlighter-rouge">트레일러</code>를 붙인다. 헤더는 총 14바이트로 목적지 MAC 주소(6바이트), 출발지 MAC주소(6바이트), Ethernet type(2바이트)로 이루어져 있다.
여기서 Ethernet type은 Ethernet으로 전송되는 상위 계층 프로토콜의 종류를 나타낸다. 트레일러는 FCS(Frame Check Sequence)라고도 불리며, 데이터 전송 도중 오류 발생 여부를 확인하는 용도이다.</p>

<p>헤더와 트레일러가 추가된 데이터를 <code class="language-plaintext highlighter-rouge">프레임(Frame)</code>이라고 한다. 즉, 네트워크를 통해 전송되는 것이 바로 프레임이다.</p>

<p>수신 측의 컴퓨터에서는 이 프레임을 받아서 목적지 주소가 자신과 일치하면 역캡슐화를 통해 데이터를 얻는다.</p>

<h1 id="3-switch">3. Switch</h1>

<p>Switch는 데이터 링크 계층에서 작동하며 Layer 2 Switch, Switching hub라고도 불린다. 스위치 내부에는 Switch의 포트 번호와 해당 포트에 연결되어 있는 컴퓨터의 MAC 주소가 등록되어 있는 데이터베이스인 <code class="language-plaintext highlighter-rouge">MAC address table</code>가 존재한다.
스위치가 처음 켜지면 Mac address table에는 아무런 정보가 없다. 이 때 컴퓨터 1에서 컴퓨터 5에 데이터를 전송하기 위해 프레임을 스위치로 보내면, MAC address table에 컴퓨터 1의 MAC 주소와 포트 번호 정보가 업데이트된다. 하지만 목적지인 컴퓨터 5에 대한 정보가 테이블에 없으므로 컴퓨터 1을 제외한 모든 포트에 프레임을 보낸다. 이를 <code class="language-plaintext highlighter-rouge">flooding</code>이라고 한다.
만약 컴퓨터 5의 정보가 테이블에 있었다면, 스위치는 프레임을 컴퓨터 5에 해당하는 포트로만 전달하며 이를 <code class="language-plaintext highlighter-rouge">MAC 주소 필터링</code>이라고 한다.</p>

<h1 id="4-통신-방식">4. 통신 방식</h1>

<ul>
  <li>전이중 통신 방식 : 각각 송신과 수신을 위한 회선이 존재해 데이터의 송수신이 동시에 가능한 방식</li>
  <li>반이중 통신 방식 : 회선 하나로 송신과 수신을 번갈아 가며 통신하는 방식</li>
</ul>

<p>허브는 회선 하나를 사용하기 때문에 반이중 통신 방식을 사용하며 충돌 도메인(충돌이 발생했을 때 영향을 미치는 범위)의 범위가 허브에 연결되어 있는 모든 컴퓨터가 된다. 반면 스위치는 송신과 수신을 위한 회선이 따로 존재하기 때문에 충돌이 발생할 확률이 적고 충돌 도메인 또한 충돌이 발생한 컴퓨터 하나로 제한된다.</p>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="Network" /><category term="Ethernet" /><category term="MacAddress" /><category term="Switch" /><summary type="html"><![CDATA[OSI 모델의 2계층인 데이터 링크 계층에 대해 알아보자.]]></summary></entry><entry><title type="html">06.전송 계층</title><link href="http://localhost:4000/network/network06/" rel="alternate" type="text/html" title="06.전송 계층" /><published>2023-12-20T00:00:00+09:00</published><updated>2023-12-20T00:00:00+09:00</updated><id>http://localhost:4000/network/network06</id><content type="html" xml:base="http://localhost:4000/network/network06/"><![CDATA[<h1 id="1-전송-계층의-역할">1. 전송 계층의 역할</h1>

<ol>
  <li>데이터가 신뢰할 수 있는 데이터인지 검사하고, 오류가 있으면 재전송을 요청한다.</li>
  <li>받은 데이터를 필요로 하는 어플리케이션에 전달한다.</li>
</ol>

<p>전송 계층의 통신 방식으로 2가지를 꼽을 수 있다.</p>
<ol>
  <li>연결형 통신 : 신뢰, 정확성을 우선으로 하여 통신 과정에서 여러 번 확인 절차를 거친다.</li>
  <li>비연결형 통신 : 동영상 같이 빠른 전송이 필요한 경우에 상대편과 통신하지 않고 보낸다.</li>
</ol>

<p>전송 계층의 연결형 통신 프로토콜에는 <code class="language-plaintext highlighter-rouge">TCP</code>가 사용되고, 비연결형 통신 프로토콜에는 <code class="language-plaintext highlighter-rouge">UDP</code>가 사용된다.</p>

<h1 id="2-tcp">2. TCP</h1>

<p>연결형 통신 프로토콜이다.
전송 계층에서 네트워크 계층으로 데이터를 보낼 때 TCP 헤더를 붙이는데, 이 때 TCP 헤더가 붙은 데이터를 <code class="language-plaintext highlighter-rouge">segment</code>라고 한다.
TCP에서 데이터를 전송하려면 먼저 <code class="language-plaintext highlighter-rouge">connection</code>이라는 가상의 독점 통신로를 확보해야 한다. 커넥션을 확보해야만 데이터를 전송할 수 있다. 데이터를 보내기 전에 연결(connection)을 확립하기 위해 패킷 요청을 세 번 교환하는 것을 <code class="language-plaintext highlighter-rouge">3-way handshake</code>라고 한다.</p>

<p>송신 측에서 수신 측으로 세그먼트를 보낼 때, 하나를 보내고 한 번 확인하는 식으로 데이터를 전달하면 시간이 오래걸리고 효율이 낮아지게 된다. 이를 해결하기 위해 세그먼트 여러 개를 많이 보내 놓고, 확인 응답을 몰아서 받는 방식을 사용한다.
세그먼트 여러 개를 많이 보내 놓을 수 있는 이유는 수신 측에서 버퍼에 데이터를 담아 놓기 때문이다. 3-way handshake를 할 때 양 측 컴퓨터는 상대방 컴퓨터의 버퍼 사이즈(window size)를 파악해 놓고 오버플로우가 나지 않게 데이터를 송수신한다. window size에 대한 정보는 TCP 헤더에 담긴다.</p>

<p>3-way handshake 이후 데이터를 전송할 때는 TCP 헤더의 일련번호와 확인 응답 번호가 사용된다.
TCP에서 데이터를 보낼 때 각 데이터에 일련 번호를 부여해 TCP 패킷의 순서를 제어할 수 있다.</p>

<h1 id="3-포트-번호">3. 포트 번호</h1>

<p>TCP 헤더에는 <code class="language-plaintext highlighter-rouge">출발지 포트 번호</code>와 <code class="language-plaintext highlighter-rouge">목적지 포트 번호</code>가 들어 있다. 이를 확인하여 어떤 어플리케이션으로 이 데이터가 가야하는지를 알 수 있다.
포트 번호는 0~65535번을 사용할 수 있다.</p>

<p>0~1023번 : well-known ports라고 하며 주요 프로토콜이 사용하도록 예약되어 있다.
1024번 : 예약되어 있지만 사용되지 않는 포트이다.
1025번 이상 : 랜덤포트로, 클라이언트 측의 송신 포트로 사용된다.</p>

<p>동작하는 어플리케이션들은 각각 포트 번호가 있어서 다른 어플리케이션과 구분된다. 데이터를 어플리케이션에 보낼 때, 이 포트 번호를 보고 구분하여 데이터를 전달한다.</p>

<h1 id="4-udp">4. UDP</h1>

<p>TCP가 신뢰할 수 있는 방식으로 안전하게 데이터를 상대방에가 전달하는 프로토콜이었다면, 비연결형 통신 프로토콜인 UDP는 효율성을 중요하게 여기는 프로토콜이다.
UDP는 데이터를 전송할 때 일일이 확인 작업을 하지 않기 때문에 데이터를 효율적으로 빠르게 보내는 것이 장점이다.
UDP 헤더가 붙은 데이터를 <code class="language-plaintext highlighter-rouge">UDP 데이터그램</code>이라고 한다. UDP 헤더는 신뢰성과 정확성이 필요하지 않아 TCP 헤더보다 훨씬 들어있는 정보가 적다.
UDP를 이용하면 같은 랜에 있는 컴퓨터나 네트워크 장비에 데이터를 일괄로 보낼 수 있으며, 이것을 <code class="language-plaintext highlighter-rouge">broadcast</code>라고 한다.
TCP는 3-way handshake와 같이 데이터를 전송할 때도 확인 응답을 하나씩 보내야 하기 때문에 브로드캐스트 같이 불특정 다수에게 보내는 통신에는 적합하지 않다.</p>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="Network" /><category term="TCP" /><category term="Port" /><category term="UDP" /><summary type="html"><![CDATA[OSI 모델의 4계층인 전송 계층에 대해 알아보자.]]></summary></entry><entry><title type="html">05.네트워크 계층</title><link href="http://localhost:4000/network/network05/" rel="alternate" type="text/html" title="05.네트워크 계층" /><published>2023-12-20T00:00:00+09:00</published><updated>2023-12-20T00:00:00+09:00</updated><id>http://localhost:4000/network/network05</id><content type="html" xml:base="http://localhost:4000/network/network05/"><![CDATA[<h1 id="1-다른-네트워크-간의-통신">1. 다른 네트워크 간의 통신</h1>

<p><code class="language-plaintext highlighter-rouge">네트워크 계층</code>에서는 네트워크 간의 통신을 가능하게 한다. 같은 네트워크 상의 컴퓨터로 정보를 전달할 때는 Ethernet과 스위치를 통해 소통이 가능했지만, 다른 네트워크 상의 컴퓨터로 데이터를 보내려면 MAC주소 외에 네트워크 주소가 추가로 필요하다.
네트워크를 식별하는 데 사용되는 주소를 <code class="language-plaintext highlighter-rouge">IP 주소</code>라고 한다. IP(Internet Protocol)는 네트워크 계층에서 사용되는 프로토콜이다. 네트워크 계층에서 다른 네트워크로 데이터를 전송하기 위해 <code class="language-plaintext highlighter-rouge">라우터(router)</code>라는 장비가 필요하다. 라우터는 데이터가 목적지까지 가는데 최적의 경로를 알려주는 역할을 한다. 이처럼 목적지 IP주소까지 어떤 경로로 데이터를 보낼지 결정하는 것을 <code class="language-plaintext highlighter-rouge">라우팅(routing)</code>이라고 한다. 라우터에는 <code class="language-plaintext highlighter-rouge">라우팅 테이블(routing table)</code>이 있어서 경로 정보를 등록하고 관리한다.
네트워크 계층에서 데이터를 캡슐화할 때, 데이터 앞에 IP 헤더를 붙인다.</p>

<p><code class="language-plaintext highlighter-rouge">라우터</code> : 서로 다른 네트워크를 연결해 주는 장치
<code class="language-plaintext highlighter-rouge">라우팅 테이블</code> : 컴퓨터 네트워크에서 목적지 주소를 목적지에 도달하기 위한 네트워크 노선으로 변환시킬 목적으로 사용되는 정보.
<code class="language-plaintext highlighter-rouge">라우팅</code> : 패킷을 목적지 컴퓨터까지 보낼 때 최적의 경로를 선택하여 전송하는 것
<code class="language-plaintext highlighter-rouge">정적 라우팅</code> : 관리자가 미리 라우팅 테이블에 경로를 수동으로 추가하는 방법. 목적지까지의 경로를 고정하거나 목적지까지의 경로가 하나로 한정되는 경우에 사용한다.
<code class="language-plaintext highlighter-rouge">동적 라우팅</code> : 네트워크 변경을 자동으로 감지하여 라우팅 테이블을 업데이트하거나 네트워크 장애가 발생했을 때 라우터끼리 정보를 교환하여 최적의 경로로 전환하는 방법이다. 관리자는 정적 라우팅처럼 라우팅 테이블에 경로를 수동으로 추가할 필요가 없다.</p>

<h1 id="2-ip-주소">2. IP 주소</h1>

<p>IP 주소는 ISP(인터넷 서비스 제공자)에게 받을 수 있다.</p>

<p>IP는 2가지 버전이 있다.</p>
<ul>
  <li>IPv4 : 32비트</li>
  <li>IPv6 : 128비트</li>
</ul>

<p>IPv4는 32비트이기 때문에 표현할 수 있는 주소에 한계가 있어서 IPv6가 등장하게 되었다.
IPv4로 표현할 수 있는 주소가 현재 필요로 하는 IP 주소의 수보다 부족하기 때문에 현재는 <code class="language-plaintext highlighter-rouge">공인 IP 주소</code>와 <code class="language-plaintext highlighter-rouge">사설 IP 주소</code>를 사용하고 있다.
참고로 공인 IP 주소는 ISP가 제공한다.</p>

<ul>
  <li>공인 IP 주소 : 인터넷에 직접 연결되는 컴퓨터나 라우터에 할당</li>
  <li>사설 IP 주소 : 회사나 가정의 랜에 있는 컴퓨터에 할당</li>
</ul>

<p>비트로 인한 IP 주소 수의 한계를 극복하기 위해 공인 IP는 라우터에 할당하고, 각 컴퓨터에는 랜의 네트워크 관리자가 자유롭게 사설 IP 주소를 할당하거나 라우터의 DHCP 기능을 사용하여 주소를 자동으로 할당한다.
이런 식으로 IP를 사용하면 공인 IP 주소를 절약할 수 있다. 사설 IP 주소는 한 네트워크 내에서 배정하는 주소기 때문에 서로 다른 네트워크 끼리는 중복이 될 수 있다.</p>

<p>IP 주소를 표시할 때, 사람이 읽기 편하도록 8비트 단위로 나눠서 표시하는데, 이를 <code class="language-plaintext highlighter-rouge">옥텟(octet)</code>이라고 한다.</p>

<p>ex. 11000100 11100100 000011000 00000010 -&gt; 4개의 옥텟
이를 더 읽기 편하도록 10진수로 변환하여 표시하기도 한다.
=&gt; 136.196.24.2</p>

<p>IP 주소는 <code class="language-plaintext highlighter-rouge">네트워크 주소</code>와 <code class="language-plaintext highlighter-rouge">호스트 주소</code>로 구성되어 있다.
네트워크 주소는 어떤 네트워크인지를 나타내며, 호스트 주소는 해당 네트워크의 어떤 컴퓨터인지를 나타낸다.</p>

<p>IP 주소는 A~E 클래스로 구분하며 일반적으로는 A~C 클래스를 사용한다.
A 클래스는 처음 1 옥텟을 네트워크 ID, 나머지 3 옥텟을 호스트 ID로 사용한다.
B 클래스는 처음 2 옥텟을 네트워크 ID, 나머지 2 옥텟을 호스트 ID로 사용하며
C 클래스는 처음 3 옥텟을 네트워크 ID, 나머지 1 옥텟을 호스트 ID로 사용한다.</p>

<p>A 클래스에서 네트워크 ID의 범위는 00000001 ~ 01111111이며,
B 클래스에서 네트워크 ID의 범위는 10000000 00000000 ~ 10111111 11111111,
C 클래스에서 네트워크 ID의 범위는 11000000 00000000 00000000 ~ 11011111 11111111 11111111이다.</p>

<p><code class="language-plaintext highlighter-rouge">네트워크 주소</code>를 표현할 때, 호스트 주소에 해당하는 비트는 0으로 채워 놓는다.
A 클래스 네트워크의 경우, 마지막 옥텟이 호스트 주소에 해당하므로 네트워크 주소가 192.168.1에 해당하는 경우를 예를 들면 다음과 같이 표현할 수 있다.
ex. 192.168.1.0</p>

<p><code class="language-plaintext highlighter-rouge">브로드캐스트 주소</code>는 해당 네트워크에 존재하는 모든 컴퓨터에 한번에 데이터를 전송할 때 사용하는 주소이다.
브로드 캐스트 주소는 호스트 주소에 해당하는 비트를 전부 1로 채워 놓는다.
192.168.1에 해당하는 네트워크의 경우, 다음과 같다.
ex. 192.168.1.255</p>

<h1 id="3-subnet">3. Subnet</h1>

<p>분할된 네트워크를 말하며, 네트워크를 분할하는 것을 subneting이라고 한다. 서브넷팅을 할 때, 호스트 ID에 해당하는 비트를 서브넷 ID로 사용한다. 따라서 “네트워크 ID + 호스트 ID”였던 구성이 “네트워크 ID + 서브넷 ID + 호스트 ID”로 바뀐다. 이렇게 서브넷 ID까지 사용하면 네트워크 ID가 어디까지인지 구분하기 힘들어진다. 이 때 이를 구분하기 위해 <code class="language-plaintext highlighter-rouge">Subnet Mask</code>라는 것을 사용한다.</p>

<p>서브넷 마스크는 네트워크 ID를 알아내기 위한 수단으로, A 클래스의 경우 처음 1옥텟이 네트워크 ID이므로 255.0.0.0, B 클래스의 경우 255.255.0.0, C 클래스의 경우 255.255.255.0이 된다. 이를 prefix 표기법으로도 표현할 수 있는데, 각각은 /8, /16, /24가 된다. 슬래쉬 이후에 몇 비트를 네트워크 ID로 표현하는 지를 나타낸다.</p>

<p>자신의 IP 주소와 서브넷 마스크를 &amp;연산(비트 연산)하면 네트워크 ID를 구할 수 있다.</p>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="Network" /><category term="Network" /><category term="Subnet" /><category term="IP" /><summary type="html"><![CDATA[OSI 모델의 3계층인 네트워크 계층에 대해 알아보자.]]></summary></entry></feed>