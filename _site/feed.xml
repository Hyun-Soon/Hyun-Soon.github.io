<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-11-21T20:55:16+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hyuim’s blog</title><subtitle>Hyuim&apos;s personal blog.</subtitle><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><entry><title type="html">[DevLog] What The Golf 모작 개발일지 #12</title><link href="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf12/" rel="alternate" type="text/html" title="[DevLog] What The Golf 모작 개발일지 #12" /><published>2024-11-21T00:00:00+09:00</published><updated>2024-11-21T00:00:00+09:00</updated><id>http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf12</id><content type="html" xml:base="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf12/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2024/11/21</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>주요 클래스 구현</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<p>Object 클래스 구현
shader에서 사용하는 구조체 ShaderData.h에 분리
DirectXManager::Render() 구현 중</p>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<p>DirectXManager::Render()에서 VertexConstantBuffer 업데이트하기</p>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>환절기 알레르기 미치겠다.</p>

<p>DirectXManager의 device에서 리소스를 만들 때, Object 클래스의 많은 정보들을 getter로 받아서 사용하고 있다. getter가 너무 많은데, 좀 더 깔끔한 방법이 없을까?
CreateBuffer의 경우, ComPtr::GetAddressOf()를 CreateBuffer 함수 인자 전달하는 곳에서 실행하면 잘 동작하는데, GetAddressOf를 다른 곳에서 실행 후 결과를 받아서 전달하면 호환이 안된다. 그래서 ComPtr&lt;ID3D11Buffer&gt;를 레퍼런스로 받아서 GetAddressOf를 실행하고 있는데, 이렇게 하면 getter에서 const를 붙일 수 없기 때문에 안전하지 않아 보인다.</p>

<p>VertexConstantBuffer 생성을 최대한 안하고 싶어서 DirectXManager에 하나만 만들어놓고, 각 Object가 같은 형식의 ConstantData를 이 버퍼에 업데이트 후 사용하려고 했다. 그런데 물체들은 대부분 안움직이는 경우가 많으로, 각각의 Object가 VertexConstantBuffer를 가지고 있으면 GPU에 데이터를 업데이트할 필요 없이 그대로 사용하면 된다. 글을 쓰다 보니 이게 더 효율적인 것 같다. 오브젝트가 많은 게임도 아니니 이렇게 구현해야겠다.</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">D3D11_SUBRESOURCE_DATA</code>의 pSysMem에 ConstantBuffer에서 필요한 구조체 변수의 주소를 넘겨주고, <code class="language-plaintext highlighter-rouge">D3D11_BUFFER_DESC</code>에서 구조체의 크기를 넘겨줬는데, 왜 CreateBuffer() 실행 후 바로 Map/Unmap을 통해 데이터를 또 넘겨주는지 이해를 못했다.
    <ul>
      <li>Map/Unmap을 하지 않아도 처음 CreateBuffer()를 실행했을 때 구조체의 데이터가 GPU에 전달되어 있다. Map/Unmap은 버퍼 데이터를 업데이트할 때 사용하면 된다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">클래스 멤버 초기화</code> vs <code class="language-plaintext highlighter-rouge">생성자 초기화 리스트</code>
    <ol>
      <li>멤버 초기화 방식
        <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">class</span> <span class="nc">MyClass</span>
 <span class="p">{</span>
     <span class="n">DirectX</span><span class="o">::</span><span class="n">SimpleMath</span><span class="o">::</span><span class="n">Vector3</span> <span class="n">mPosWorld</span> <span class="o">=</span> <span class="p">{</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span> <span class="p">};</span>
 <span class="p">};</span>

</code></pre></div>        </div>
        <ul>
          <li>멤버의 기본값이 모든 생성자에서 동일할 때</li>
          <li>코드의 가독성을 높이고 싶을 때</li>
        </ul>
      </li>
      <li>생성자 초기화 리스트
        <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">class</span> <span class="nc">MyClass</span>
 <span class="p">{</span>
 <span class="nl">public:</span>
     <span class="n">MyClass</span><span class="p">()</span> <span class="o">:</span> <span class="n">mPosWorld</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">)</span> <span class="p">{}</span>
 <span class="p">};</span>

</code></pre></div>        </div>
        <ul>
          <li>생성자마다 다른 기본값을 사용하고 싶을 때</li>
          <li>멤버 변수에 <code class="language-plaintext highlighter-rouge">const</code> 또는 <code class="language-plaintext highlighter-rouge">reference</code>가 있을 때</li>
          <li>복잡한 초기화 로직이 필요할 때</li>
        </ul>
      </li>
    </ol>
  </li>
  <li><code class="language-plaintext highlighter-rouge">MACRO</code> vs <code class="language-plaintext highlighter-rouge">using</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">\#define</code>은 전처리기에 의해 단순히 텍스트 치환되므로 빠르고 간단하다. 하지만 컴파일러가 타입 체크를 수행하지 못하므로, 잘못된 타입 전달이 런타임 에러를 유발할 수 있다.</li>
      <li><code class="language-plaintext highlighter-rouge">using</code>은 실제 타입을 컴파일러가 이해하므로 타입 체크를 수행하여 안전하다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Blob</code> : DirectX에서 데이터를 저장하거나 관리하는 데 사용하는 인터페이스 객체이다. 주로 쉐이더 코드 컴파일 결과(바이트코드)를 저장하는 용도로 사용된다.</li>
</ul>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="MyWhatTheGolf" /><category term="개발일지" /><category term="directX" /><category term="WinAPI" /><summary type="html"><![CDATA[What The Golf 모작 개발일지]]></summary></entry><entry><title type="html">[DevLog] What The Golf 모작 개발일지 #11</title><link href="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf11.md/" rel="alternate" type="text/html" title="[DevLog] What The Golf 모작 개발일지 #11" /><published>2024-11-15T00:00:00+09:00</published><updated>2024-11-15T00:00:00+09:00</updated><id>http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf11.md</id><content type="html" xml:base="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf11.md/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2024/11/15</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>코드 정리</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<ul>
  <li>Rigidbody를 컴포넌트로 구현하는 것을 고민 중</li>
  <li>Object 클래스 구현 중</li>
</ul>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<p>없음</p>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<p>코드 정리</p>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>Object를 상속받아서 Cylinder, Cube 등의 클래스를 만든다고 할 때, 각 인스턴스의 특성을 어떻게 정해야할지 고민이다. Rigidbody 클래스를 Object의 컴포넌트로 만들면, 필요한 인스턴스에서만 사용할 수 있다. 하지만 현재 구상에서는 대부분의 물체가 강체이기 때문에 동적 할당으로 인해 런타임 성능이 떨어진다. 그렇다고 Object 클래스 자체에 Rigidbody를 넣어 놓자니 불필요한 메모리가 생기게 된다. 이후에 강체가 아닌 물체를 많이 추가할 지 모르기 때문에 웬만하면 불필요한 메모리 사용을 줄이고 싶다. 컴포넌트로 하는 경우, 스테이지를 로딩하는 화면을 만들어서 시간을 끌어도 된다. 아직 어떤 방향이 최선인지 잘 모르겠다.</p>

<p>물리 엔진 클래스에서 Object와 Rigidbody 내부 값들을 다루는 방식도 고민이다. 엔진이 어디까지 접근할 수 있는게 좋을까. 객체지향이란 뭘까.</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">std::vector::emplace_back</code>
    <ul>
      <li>객체를 벡터에 직접 생성하므로, 불필요한 복사를 방지한다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">static_assert</code>
    <ul>
      <li>컴파일 시간에 조건을 검사하여 컴파일 에러를 발생시킨다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">ID3D11DeviceContext::DrawIndexedInstanced</code>
    <ul>
      <li>동일한 메쉬를 사용하는 여러 오브젝트를 렌더링할 때, GPU의 효율성을 높이는 기술. 각 오브젝트는 같은 메쉬(버텍스와 인덱스 데이터)를 공유하지만, 각 인스턴스별로 다른 변환 데이터(mvp 등)를 적용한다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">텍스쳐가 포함된 FBX</code> vs <code class="language-plaintext highlighter-rouge">텍스쳐 파일이 따로 있는 FBX</code>
    <ul>
      <li>재활용성이나 로딩 시간 등 많은 부분에서 텍스쳐 파일이 따로 있는 것이 효율적이다.</li>
    </ul>
  </li>
</ul>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="MyWhatTheGolf" /><category term="개발일지" /><category term="directX" /><category term="WinAPI" /><summary type="html"><![CDATA[What The Golf 모작 개발일지]]></summary></entry><entry><title type="html">[DevLog] What The Golf 모작 개발일지 #10</title><link href="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf10/" rel="alternate" type="text/html" title="[DevLog] What The Golf 모작 개발일지 #10" /><published>2024-11-14T00:00:00+09:00</published><updated>2024-11-14T00:00:00+09:00</updated><id>http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf10</id><content type="html" xml:base="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf10/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2024/11/14</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>3D Asset Rendering</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<p>3D Asset 단색으로 Rendering 성공</p>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<ul>
  <li>Assimp import 후, hlsl 파일만 수정하고 빌드 시 에러 발생
    <ul>
      <li>cpp 파일 아무거나 의미없는 수정 후 다시 빌드</li>
      <li>Assimp와 같은 외부 라이브러리를 사용할 때, Visual Studio는 빌드할 때만 프로젝트 폴더에 필요한 DLL 파일을 복사해 놓는다. HLSL 파일은 셰이더 코드로서 빌드 과정에 직접적으로 포함되지 않으며, 컴파일 단계에서 DLL 파일을 참조할 필요가 없기 때문에 cpp 파일을 수정하지 않으면 프로젝트가 빌드 과정을 거치지 않는다. 이 때문에 HLSL 파일만 수정 후 빌드하면 DLL 복사가 트리거되지 않고, Assimp DLL을 찾을 수 없어 실행 오류가 발생한다.</li>
    </ul>
  </li>
  <li>삼각형이 일부만 렌더링되고 일부는 렌더링되지 않는 현상 발생
    <ul>
      <li><code class="language-plaintext highlighter-rouge">DirectX::SimpleMath::Vector3</code>와 <code class="language-plaintext highlighter-rouge">DirectX::XMFLOAT3</code>를 혼용해서 사용하고 있던 것을 Vector3로 통일함.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<ul>
  <li>화살표 에셋 찾기</li>
  <li>물체의 단순한 움직임 구현하기</li>
  <li>코드 정리</li>
</ul>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>어떻게 vertex의 수와 index의 수가 같을 수가 있나 고민했는데, 직접 찍어보니 하나의 vertex를 중복해서 넣어 둔 것이었다.</p>

<p>vertex의 타입을 바꿔줄 때마다 여러 Desc의 설정을 바꿔줘야 하는데, 이를 효율적으로 작성할 수 있는 방법을 생각해 봐야겠다. 당장 떠오르는건 typeof인데, 더 좋은 방법이 있을 것 같다.</p>

<p>정리하다가 문득 row-major column-major 변환할 필요 없이 곱 순서를 한쪽에서 바꿔주면 되지 않을까 생각해봤는데, 그냥 순서를 바꾸자니 행렬곱이 성립이 안되고, 행렬곱을 만드려고 다 transpose 해버리면 결국 row-major로 계산하고 마지막에 한번에 transpose 해주는게 효율적이라는 걸 깨달았다. 까비.</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SimpleMath</code> vs <code class="language-plaintext highlighter-rouge">DirectXMath(XM)</code>
    <ul>
      <li>SimpleMath는 내부적으로 XMVECTOR를 wrapping하지만, 최적화된 SIMD 명령어를 직접 활용하지 않으므로 XM보다 성능이 낮다. C++ 연산자 오버로딩을 사용하여 직관적이고, 코드를 간결하게 작성할 수 있다.</li>
      <li>XMVECTOR는 SSE와 같은 SIMD 명령어를 직접 활용하여 성능 최적화가 뛰어나다. 또한 16바이트 정렬을 요구해 CPU의 캐시 활용을 극대화하며, 대규모 벡터 연산에서 메모리 사용이 효율적이다.</li>
    </ul>
  </li>
</ul>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="MyWhatTheGolf" /><category term="개발일지" /><category term="directX" /><category term="WinAPI" /><summary type="html"><![CDATA[What The Golf 모작 개발일지]]></summary></entry><entry><title type="html">[DevLog] What The Golf 모작 개발일지 #09</title><link href="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf09/" rel="alternate" type="text/html" title="[DevLog] What The Golf 모작 개발일지 #09" /><published>2024-11-13T00:00:00+09:00</published><updated>2024-11-13T00:00:00+09:00</updated><id>http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf09</id><content type="html" xml:base="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf09/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2024/11/13</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>3D Asset 렌더링</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<p>프로그램은 실행되나, 제대로 렌더링 되지 않음
Index 문제인 것으로 생각됨</p>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<ul>
  <li>Unity Asset Store에서 Import한 에셋들이 분홍색을 띄며 제대로 보이지 않음
    <ul>
      <li>Unity를 최신 버전으로 업데이트해서 해결</li>
    </ul>
  </li>
  <li>Assimp::Importer로 fbx 파일을 읽었을 때, Microsoft C++ exception: std::length_error 발생
    <ul>
      <li>fbx 파일을 ASCII -&gt; binary로 변경, 우선 vertex와 index만 추출</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<p>3D Asset 렌더링</p>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>fbx 파일에서 읽어온 vertex 수와 index의 수가 같다. fbx 파일을 blender에서 import 했을 때 잘 보이는 것으로 봐서는 파일 문제는 아닌 것 같다(색은 원본과 달리 단색으로만 보인다). 내가 삼각형을 렌더링할 때는 indices 버퍼에서 순서대로 3개씩 묶어서 하나의 삼각형을 만들었기 때문에 같은 index가 중복되어 들어있었다. index를 중복되지 않게 표현하는 방법이 있는지 찾아봐야겠다.</p>

<p>index를 잘못읽어온 경우도 생각해보자(vertex와 수가 정확히 같은걸 봐서는 잘못 읽어온 건 아닌 것 같긴 하다. 내일 다른 에셋도 테스트 해보자.).</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Assimp</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Importer</code> : 모델 데이터를 불러오는 역할을 하는 가장 기본적인 클래스. FBX 파일을 포함한 다양한 파일 형식을 읽어올 수 있다. <code class="language-plaintext highlighter-rouge">ReadFile()</code> 함수를 통해 파일을 로드하며, 반환되는 <code class="language-plaintext highlighter-rouge">aiScene</code>의 포인터를 통해 파일에 대한 정보를 얻을 수 있다.</li>
      <li><code class="language-plaintext highlighter-rouge">aiScene</code> : 모델의 메인 데이터 구조로, mesh, camera, lighting, animation 등 모든 정보를 포함하고 있다. aiScene은 모든 메쉬 데이터를 포함하는 <code class="language-plaintext highlighter-rouge">mMeshes</code>, 전체 노드 구조를 나타내는 <code class="language-plaintext highlighter-rouge">mRootNode</code> 등의 멤버를 가진다.</li>
      <li><code class="language-plaintext highlighter-rouge">aiMesh</code> : aiScene 내에 포함된 각 메쉬 데이터를 나타내는 클래스. 메쉬는 기본적으로 정점, 인덱스, 법선, UV 좌표 등의 데이터를 포함한다. 메쉬마다 다른 버텍스, 인덱스, 텍스처 좌표 등이 포함될 수 있으며, <code class="language-plaintext highlighter-rouge">mVertices</code>, <code class="language-plaintext highlighter-rouge">mFaces</code>, <code class="language-plaintext highlighter-rouge">mNormals</code>, <code class="language-plaintext highlighter-rouge">mTextureCoords</code> 등의 멤버로 각 정보를 접근할 수 있다.</li>
      <li><code class="language-plaintext highlighter-rouge">aiNode</code> : 장면을 계층적으로 구성하기 위해 사용되는 클래스. FBX 파일은 일반적으로 계층 구조를 가지기 때문에, 이 구조를 재현하는 데 중요한 역할을 한다. aiNode는 트리 구조로 구성되어 있다.</li>
    </ul>
  </li>
</ul>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="MyWhatTheGolf" /><category term="개발일지" /><category term="directX" /><category term="WinAPI" /><summary type="html"><![CDATA[What The Golf 모작 개발일지]]></summary></entry><entry><title type="html">[DevLog] What The Golf 모작 개발일지 #08</title><link href="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf08/" rel="alternate" type="text/html" title="[DevLog] What The Golf 모작 개발일지 #08" /><published>2024-11-12T00:00:00+09:00</published><updated>2024-11-12T00:00:00+09:00</updated><id>http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf08</id><content type="html" xml:base="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf08/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2024/11/12</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<ul>
  <li>Visual Studio Graphics Debugger 무한 로딩 원인 찾기</li>
  <li>Viewport의 MinDepth, MaxDepth / XMMatrixPerspectiveFovLH의 nearZ, farZ 개념 정리하기</li>
  <li>삼각형 렌더링 과정에서 겪었던 문제들 원인 찾기</li>
</ul>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<ul>
  <li>목표 해결</li>
</ul>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<ul>
  <li>Visual Studio Graphic Debugger 무한 로딩 이유
    <ul>
      <li>swapChain-&gt;Present() 함수를 한번만 실행해서, frame의 업데이트가 없어서 debugger가 새로운 프레임을 무한히 기다리며 무한 로딩이 걸리는 것 같다. swapChain-&gt;Present()를 무한 루프에 넣어서 실행했더니 해결됐다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Viewport</code>의 <code class="language-plaintext highlighter-rouge">MinDepth</code>, <code class="language-plaintext highlighter-rouge">MaxDepth</code>를 조절해서 삼각형을 범위 안에 넣어도 렌더링되지 않았던 이유
    <ul>
      <li>Viewport의 MinDepth, MaxDepth는 NDC로 정규화할 때의 깊이의 최솟값과 최댓값을 의미한다. 렌더링되는 z값의 범위를 조절하려면 <code class="language-plaintext highlighter-rouge">XMMatrixPerspectiveFovLH</code>의 <code class="language-plaintext highlighter-rouge">nearZ</code>, <code class="language-plaintext highlighter-rouge">farZ</code>을 바꿔줘야 한다.</li>
    </ul>
  </li>
  <li>vertex의 index 순서
    <ul>
      <li>vertex의 index 순서를 보는 방향 기준 왼손으로 감는 방향(시계 방향)이 아닌, 오른손으로 감는 방향(반시계 방향)으로 설정해줘서 렌더링되지 않았다(<code class="language-plaintext highlighter-rouge">D3D11_RASTERIZER_DESC</code>의 <code class="language-plaintext highlighter-rouge">CullMode</code>가 <code class="language-plaintext highlighter-rouge">D3D11_CULL_BACK</code>인 상황).</li>
    </ul>
  </li>
  <li>View 행렬 함수
    <ul>
      <li><code class="language-plaintext highlighter-rouge">XMMatrixLookAtLH()</code>와 <code class="language-plaintext highlighter-rouge">XMMatrixLookToLH()</code>로 View 행렬을 구성했을 때는 렌더링이 잘 되는데, <code class="language-plaintext highlighter-rouge">CreateLookAt()</code>함수로 View 행렬을 구성했을 때는 렌더링이 되지 않는다. Graphics Debugger를 실행했을 때, XMMatrix 함수들은 View 행렬이 단위행렬인 반면, CreateLookAt() 함수는 아예 DrawIndexed()조차 실행되지 않았다. XM 함수들은 DirectX::XMMatrix를 반환하고, CreateLookAt 함수는 DirectX::SimpleMath::Matrix를 반환한다. 검색결과 상호간에 변환이 자유롭게 되는 것 같은데 무엇이 문제인지 더 찾아봐야겠다. 왜 DrawIndexed()조차 실행되지 않았는지 생각해보자.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<ul>
  <li>3D 에셋 찾아보기</li>
  <li>3D 에셋 렌더링하기</li>
</ul>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>14시간 동안 공부하느라 고생했다. 아쉬운 점은, 천천히 코드를 살펴보면서 의미를 살폈으면 더 빠르게 해결할 수 있지 않았나 싶다. 답답할 땐 억지로 앉아 있지 말고 잠깐 산책이나 다녀오자.</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="MyWhatTheGolf" /><category term="개발일지" /><category term="directX" /><category term="WinAPI" /><summary type="html"><![CDATA[What The Golf 모작 개발일지]]></summary></entry><entry><title type="html">[DevLog] What The Golf 모작 개발일지 #07</title><link href="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf07/" rel="alternate" type="text/html" title="[DevLog] What The Golf 모작 개발일지 #07" /><published>2024-11-11T00:00:00+09:00</published><updated>2024-11-11T00:00:00+09:00</updated><id>http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf07</id><content type="html" xml:base="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf07/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2024/11/11</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>삼각형 렌더링</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<p>삼각형 렌더링 성공</p>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<ul>
  <li>View 행렬을 단위 행렬로 설정
    <ul>
      <li>MVP에서 View Matrix를 DirectX::SimpleMath::Matrix() 기본 생성자로 넣어놨음. 단위행렬이라 변환에 영향이 없어서 잘 보일 줄 알았는데, 렌더링 되지 않음. CreateLookAt() 함수를 사용하여 해결.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<ul>
  <li>Visual Studio 2022 Graphics debugger 무한 로딩 원인 찾기</li>
  <li>vertex 위치가 y축 기준으로 반전되는 문제 원인 찾기(directX는 row-major, hlsl은 column-major이므로 shader에 matrix 넘길 때, transpose 해줘야 함. 이걸 안해서 생기는 문제인 것 같다)</li>
  <li>Viewport의 minDepth = 0.0f, maxDepth = 1.0f로 설정했는데, vertex의 위치가 0.0f에 가깝거나, 0.9f를 넘어가도 렌더링되지 않는 이유 찾기.</li>
  <li>3D object 찾아보기</li>
</ul>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>앞으로 여러 오브젝트를 렌더링하게 될텐데, 각 오브젝트의 특징에 따라 Vertex 구조체와 Constant buffer에 담길 정보들이 달라져야 할 수도 있다. vertices, indices, texture, buffer 등을 오브젝트 클래스의 멤버로 놓고 각자 렌더링하는 방식이 좋을까? 더 효율적인 방법이 있을지 고민해보자. 분위기를 통일성 있게 렌더링하면 굳이 다르지 않아도 될 것 같기도 하다.</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Matrix order</code>
    <ul>
      <li>DirectX : Row-Major</li>
      <li>HLSL : Column-Major</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Map과 Unmap</code> : DirectX3D 11에서 GPU 리소스를 CPU에서 수정하려면 일시적으로 해당 리소스를 맵핑해야 한다. 구조체 <code class="language-plaintext highlighter-rouge">D3D11_MAPPED_SUBRESOURCE</code>는 Map 함수 호출 시 얻은 CPU 메모리 포인터를 저장하여 데이터를 GPU 리소스에 쓸 수 있도록 한다. 아래의 코드에서, GPU의 constantBuffer(ID3D11Buffer 타입)를 CPU에서 접근할 수 있도록 잠금 상태로 설정한다. Map 함수가 성공적으로 실행되면 ms.pData는 CPU에서 직접 접근할 수 있는 메모리 위치를 가리키게 된다. 이후 memcpy를 통해 GPU의 constantBuffer 메모리로 데이터를 전송하고 Unmap으로 맵핑을 해제한다.
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">D3D11_MAPPED_SUBRESOURCE</span> <span class="n">ms</span><span class="p">;</span>
<span class="n">context</span><span class="o">-&gt;</span><span class="n">Map</span><span class="p">(</span><span class="n">constantBufferPtr</span><span class="p">,</span> <span class="p">...);</span>
<span class="n">memcpy</span><span class="p">(</span><span class="n">ms</span><span class="p">.</span><span class="n">pData</span><span class="p">,</span> <span class="p">...);</span>
<span class="n">context</span><span class="o">-&gt;</span><span class="n">Unmap</span><span class="p">(...);</span>
</code></pre></div>    </div>
  </li>
</ul>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="MyWhatTheGolf" /><category term="개발일지" /><category term="directX" /><category term="WinAPI" /><summary type="html"><![CDATA[What The Golf 모작 개발일지]]></summary></entry><entry><title type="html">[DevLog] What The Golf 모작 개발일지 #06</title><link href="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf06/" rel="alternate" type="text/html" title="[DevLog] What The Golf 모작 개발일지 #06" /><published>2024-10-30T00:00:00+09:00</published><updated>2024-10-30T00:00:00+09:00</updated><id>http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf06</id><content type="html" xml:base="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf06/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2024/10/30</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>삼각형 렌더링</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<ul>
  <li>D3D11_INPUT_ELEMENT_DESC 생성</li>
  <li>Vertex Shader 구현</li>
</ul>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<ul>
  <li>Pixel Shader 구현</li>
</ul>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<ul>
  <li>GPU 구조를 공부할 필요성을 느낀다.</li>
  <li>Shader 코드 짤 때, pipeline 흐름 생각하면서 짜면 실수가 줄어들 것 같다.</li>
</ul>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SM</code> : Streaming Multiprocessor. CPU에 Core가 있다면, GPU에는 SM이 있다. SM은 병렬 처리를 수행하는 GPU의 핵심 연산 장치이다. 각 SM은 수백 개 이상의 작은 코어(CPU에서의 코어와 다름)를 가지고 있으며, 동시에 다수의 스레드를 처리하여 높은 연산 성능을 제공한다. GPU의 SM의 코어는 <code class="language-plaintext highlighter-rouge">CUDA Core</code> 또는 <code class="language-plaintext highlighter-rouge">ALU</code>라고 부르기도 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">SM의 주요 기능</code>
    <ol>
      <li>스레드 그룹화 및 동기화
 SM은 스레드를 <code class="language-plaintext highlighter-rouge">Warp</code>라는 작은 그룹(일반적으로 32개)으로 관리한다. 모든 스레드는 동시에 같은 명령어를 실행하며, 동일한 메모리 영역에 접근할 수 있어 높은 연산 효율을 낸다.</li>
      <li>병렬 연산 지원
 SM의 각 코어는 정수 연산, 부동소수점 연산 등을 담당한다. 병렬 처리로 인해 다수의 데이터 요소에 대한 계산을 동시에 수행할 수 있어, 특히 영상 처리나 신경망 훈련에 큰 성능 향상을 제공한다.</li>
      <li>레지스터 및 공유 메모리
 SM은 각 스레드가 사용하는 레지스터와 여러 스레드가 함께 사용하는 shared memory를 가지고 있다. 공유 메모리는 낮은 대기 시간으로 데이터에 접근할 수 있어 스레드 간 데이터 교환이 원활하다.</li>
      <li>SIMD(Single Instruction, Multiple Data)
 SM은 동일한 명령어를 여러 데이터에 적용하는 SIMD 방식을 채택해 높은 성능을 유지한다.</li>
    </ol>
  </li>
  <li><code class="language-plaintext highlighter-rouge">CPU vs SM</code>
    <ul>
      <li>CPU Core : 낮은 지연 시간과 고속 처리를 위해 설계되었다. 복잡한 연산과 논리 제어를 빠르게 수행할 수 있도록 고성능 메모리 계층과 고급 제어 유닛을 갖추고 있다.</li>
      <li>GPU의 SM의 Core : GPU의 코어는 대규모 병렬 연산을 처리하는 데 최적화되어 있다. 개별 코어는 단순하지만 동시에 수많은 코어가 병렬로 작업을 수행해 고속 처리가 가능하다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">D3D11_INPUT_ELEMENT_DESC</code> : VertexShader에 들어오는 각 input의 구조를 설명하는 구조체.</li>
</ul>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="MyWhatTheGolf" /><category term="개발일지" /><category term="directX" /><category term="WinAPI" /><summary type="html"><![CDATA[What The Golf 모작 개발일지]]></summary></entry><entry><title type="html">[DevLog] What The Golf 모작 개발일지 #05</title><link href="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf05/" rel="alternate" type="text/html" title="[DevLog] What The Golf 모작 개발일지 #05" /><published>2024-10-29T00:00:00+09:00</published><updated>2024-10-29T00:00:00+09:00</updated><id>http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf05</id><content type="html" xml:base="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf05/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2024/10/29</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>삼각형 렌더링</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<ul>
  <li>Vertex Buffer, Index Buffer, 생성</li>
  <li>Vertex Constant Buffer, Pixel Constant Buffer 생성</li>
</ul>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<ul>
  <li>D3D11_INPUT_ELEMENT_DESC 설정</li>
  <li>vertex shader, pixel shader</li>
</ul>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>확실히 직접 짜보는게 머리에 잘 남고 정리가 잘된다.</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<ul>
  <li>GPU에 메모리를 할당하는 작업은 <code class="language-plaintext highlighter-rouge">D3D11Device</code>에서 수행한다.</li>
  <li>SUBRESOURCE를 만들 때 일관된 작업을 거쳐야 한다. 예를 들어 Buffer를 만들 때, <code class="language-plaintext highlighter-rouge">D3D11_BUFFER_DESC</code>과 <code class="language-plaintext highlighter-rouge">D3D11_SUBRESOURCE_DATA</code>가 필요하다. DESC로 SUBRESOURCE의 특징을 정의하고, DATA로 실제 데이터가 들어있는 주소를 넘겨준다.</li>
</ul>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="MyWhatTheGolf" /><category term="개발일지" /><category term="directX" /><category term="WinAPI" /><summary type="html"><![CDATA[What The Golf 모작 개발일지]]></summary></entry><entry><title type="html">\[DevLog\] What The Golf 모작 개발일지 \#04</title><link href="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf04/" rel="alternate" type="text/html" title="\[DevLog\] What The Golf 모작 개발일지 \#04" /><published>2024-10-25T00:00:00+09:00</published><updated>2024-10-25T00:00:00+09:00</updated><id>http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf04</id><content type="html" xml:base="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf04/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2024/10/25</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>window, directx 클래스 분할</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<p>임시로 클래스 분할</p>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<p>directx로 게임을 처음 만들어봐서 그림이 잘 안그려진다. 진행하면서 수시로 리팩토링 해야 할 듯</p>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<p>삼각형 렌더링</p>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<ul>
  <li>window와 directx를 관리하는 클래스를 각각 만들었다. 나중에 window, device, context 등을 사용해서 게임을 렌더링해야 할텐데, 얘네를 관리하는 클래스에 각자 넣어놔야할지, MyWhatTheGolf 클래스에서 한번에 관리해야 할지 고민이 된다. 다른 게임 코드를 찾아봤는데 몇몇 프로젝트는 window를 전역변수로 해놨다. 일단은 전역변수 쓰지 말고 해보자.</li>
  <li>해상도 값도 웬만하면 MyWhatTheGolf 말고 WindowManager에서 바로 설정하고 싶은데, 나중에 MyWhatTheGolf 클래스에서 사용할 일이 있을 것 같아서 일단 냅두기로 했다.</li>
  <li>프로젝트 진행하면서 구조를 계속 생각해보자.</li>
</ul>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<ul>
  <li><a href="https://docs.popekim.com/ko/coding-standards/cpp">Coding Standard</a></li>
</ul>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="MyWhatTheGolf" /><category term="개발일지" /><category term="directX" /><category term="WinAPI" /><summary type="html"><![CDATA[What The Golf 모작 개발일지]]></summary></entry><entry><title type="html">\[DevLog\] What The Golf 모작 개발일지 \#03</title><link href="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf03/" rel="alternate" type="text/html" title="\[DevLog\] What The Golf 모작 개발일지 \#03" /><published>2024-10-24T00:00:00+09:00</published><updated>2024-10-24T00:00:00+09:00</updated><id>http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf03</id><content type="html" xml:base="http://localhost:4000/devlog/mywhatthegolf/MyWhatTheGolf03/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2024/10/24</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<ul>
  <li>DirectX 초기화하기</li>
  <li>Window, DirectX 초기화 코드 클래스로 분할하기</li>
</ul>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<p>코드 분할 진행 중</p>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Error LNK2019 unresolved external symbol _main referenced in function "int __cdecl invoke_main(void)" (?invoke_main@@YAHXZ)</code> : main 함수를 wWinMain 함수로 변경했을 때 발생했다. properties -&gt; Linker -&gt; System -&gt; SubSystem에서 Windows로 설정해줘서 해결했다.</li>
</ul>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<ul>
  <li>Window, DirectX 초기화 코드 클래스로 분할하기</li>
  <li>삼각형 렌더링하기</li>
</ul>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<ul>
  <li>객체 지향 프로그래밍 경험이 없다 보니, Initializer를 어떤 식으로 만드는 게 좋은지 감이 안온다. 인터페이스를 만들고 윈도우, directX intializer에서 이를 기반으로 만들자니 함수에 필요한 인자가 다르고 명시할 인터페이스 내용도 딱히 없다. 일단은 Initializer 객체 안에 window, directX intializer를 멤버 변수로 넣을 것 같다.</li>
  <li>디자인 패턴 공부의 필요성을 느낀다. Component 디자인 패턴을 조사해보자.</li>
</ul>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SAL</code> : Standard Annotation Language. Microsoft가 Visual C++에서 코드 분석과 정적 코드 검사를 개선하기 위해 도입한 주석 시스템. 코드의 함수, 매개변수, 반환 값에 대한 의도를 명확히 하여, 잠재적인 버그를 미리 감지하고, 안정성을 향상시키는 데 기여한다.</li>
  <li><code class="language-plaintext highlighter-rouge">WINAPI</code> : 매크로로 정의되어 있으며, 실제로는 <code class="language-plaintext highlighter-rouge">__stdcall</code>이라는 호출 규약을 의미한다. __stdcall은 매개변수를 오른쪽에서 왼쪽으로 스택에 push하고, 함수가 반환될 때 호출자가 아니라 함수가 스택을 정리하는 방식이다. 윈도우 API 함수들은 이 규약을 따르기 때문에, 윈도우 API 함수와의 일관성을 유지하기 위해 프로그래머가 작성하는 콜백 함수에도 <code class="language-plaintext highlighter-rouge">WINAPI</code>를 사용하는 경우가 많다.</li>
</ul>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="MyWhatTheGolf" /><category term="개발일지" /><category term="directX" /><category term="WinAPI" /><summary type="html"><![CDATA[What The Golf 모작 개발일지]]></summary></entry></feed>