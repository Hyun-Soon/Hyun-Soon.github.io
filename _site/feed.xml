<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-02T18:59:12+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hyuim’s blog</title><subtitle>Hyuim&apos;s personal blog.</subtitle><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><entry><title type="html">\[OS\] 프로세스의 메모리 구조</title><link href="http://localhost:4000/os/MemoryStructure/" rel="alternate" type="text/html" title="\[OS\] 프로세스의 메모리 구조" /><published>2025-03-02T00:00:00+09:00</published><updated>2025-03-02T00:00:00+09:00</updated><id>http://localhost:4000/os/MemoryStructure</id><content type="html" xml:base="http://localhost:4000/os/MemoryStructure/"><![CDATA[<h2 id="1-메모리-구조">1. 메모리 구조</h2>

<p>메모리는 아래의 4가지 구조로 구분된다.</p>
<ol>
  <li>코드 영역(Text Section) : 실행 코드 저장(읽기 전용)</li>
  <li>데이터 영역(Data Section)
    <ul>
      <li><code class="language-plaintext highlighter-rouge">.data</code> : 초기화 된 전역 변수, 정적 변수 저장</li>
      <li><code class="language-plaintext highlighter-rouge">.bss</code> : 초기화되지 않은 전역 변수 저장</li>
    </ul>
  </li>
  <li>힙 영역(Heap) : malloc, new 등을 통해 동적 할당</li>
  <li>스택 영역(Stack) : 지역 변수, 함수 호출 프레임 저장</li>
</ol>

<p></p>
<h2 id="2-stack과-heap">2. Stack과 Heap</h2>

<p>일반적으로 프로세스가 사용할 수 있는 메모리 공간이 정해져 있고, 이 안에서 코드, 데이터, 힙, 스택 영역이 배치된다. x86_64 아키텍쳐 기준으로, 힙 영역은 낮은 주소에서 높은 주소로, 스택 영역은 높은 주소에서 낮은 주소로 성장하며 유동적으로 크기가 변한다.</p>

<h3 id="2-1-stack">2-1. Stack</h3>

<p>스택은 고정된 최대 크기를 가진다. 이를 초과 시, Stack Overflow가 발생한다.
 사용자가 설정하여 이 최대 크기를 바꿀 수 있다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Stack Frame</code> : 함수 단위로 관리되는 메모리 블록. 함수가 호출되면 아래의 방식으로 프레임이 생성된다.</li>
  <li>스택 관련 레지스터
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ESP</code> : Extended Stack Pointer. 현재 스택의 최상단 주소를 가리키는 포인터. push, pop 연산이 수행될 때 자동으로 변환됨.</li>
      <li><code class="language-plaintext highlighter-rouge">EBP</code> : Extended Base Pointer. 함수의 스택 프레임 시작 주소를 저장하는 포인터. 함수가 호출되면 현재 EBP 값을 저장하고, 새로운 스택 프레임을 설정.</li>
    </ul>
  </li>
  <li>함수 호출 시 어셈블리 및 스택 프레임 변화
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <pre><code class="language-assembly">push ebp        ; 이전 EBP 저장
mov ebp, esp    ; 현재 ESP를 EBP로 설정 (새로운 스택 프레임 시작)
sub esp, 8      ; 지역 변수 공간 할당 (8바이트)
mov eax, [ebp+8]; 첫 번째 인자 값 로드
mov ebx, [ebp+12]; 두 번째 인자 값 로드
add eax, ebx    ; 두 값을 더함
mov [ebp-4], eax; 결과를 지역 변수에 저장
mov esp, ebp    ; 스택 포인터 복구
pop ebp         ; 이전 EBP 복원
ret             ; 리턴
</code></pre>
  </li>
</ul>

<h3 id="2-2-heap">2-2. Heap</h3>

<p>힙의 최대 크기는 OS 설정과 메모리 상황에 따라 달라진다.
힙 할당 방식은 대표적으로 2가지가 있다.</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">sbrk()</code> 방식 (전통적인 방식)
 BSS(Data)영역 바로 위에서 성장하기 시작함. sbrk()를 사용하여 힙 영역을 늘릴 수 있지만, 스택과 충돌할 위험이 있다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">mmap()</code> 방식 (현대적인 방식)
 현대적인 OS에서는 mmap()을 활용하여 힙을 가변적으로 관리한다. 힙을 더 크게 할당해야 할 경우, 새로운 가상 메모리 페이지를 만들어 확장한다. 따라서 힙 크기는 이론상 물리적 메모리(RAM)과 가상 메모리 한도 내에서 커질 수 있다.</p>

    <p>mmap()을 사용하면 힙을 유연하게 확장할 수 있지만, 다음과 같은 제한이 있다.</p>
    <ol>
      <li>프로세스의 가상 메모리 크기 제한</li>
      <li>물리 메모리(RAM) 및 스왑 공간 크기</li>
      <li>프로세스 당 열 수 있는 최대 메모리 매핑 개수</li>
    </ol>
  </li>
</ol>

<h2 id="3-buffer-overflow메모리-주소를-활용한-해킹-기법">3. Buffer Overflow(메모리 주소를 활용한 해킹 기법)</h2>

<p>메모리 주소를 활용하는 대표적인 방법으로 <code class="language-plaintext highlighter-rouge">Buffer Overflow</code>가 있다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">개념</code> : 프로그램이 버퍼(배열 등)에 데이터를 저장할 때, 크기를 초과하는 입력이 들어오면 인접한 메모리 영역을 덮어쓸 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">공격 방식</code> : 함수의 리턴 주소를 덮어써서 악성 코드가 실행되도록 유도, 또는 기존 변수 값을 변조하여 권한 상승 등의 공격 수행.</li>
  <li><code class="language-plaintext highlighter-rouge">코드 예제</code></li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">vulnerableFunction</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">userInput</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>  <span class="c1">// 64바이트 크기의 버퍼</span>
    <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">userInput</span><span class="p">);</span>  <span class="c1">// 크기 검사 없이 복사 (취약점)</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">userInput</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Enter input: "</span><span class="p">);</span>
    <span class="n">gets</span><span class="p">(</span><span class="n">userInput</span><span class="p">);</span>  <span class="c1">// gets()는 길이 검사를 안 함 (보안 취약)</span>
    <span class="n">vulnerableFunction</span><span class="p">(</span><span class="n">userInput</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">userInput</code>이 <strong>64바이트를 초과하면</strong> <code class="language-plaintext highlighter-rouge">buffer</code>의 경계를 넘어 <strong>리턴 주소를 덮어쓸 가능성이 있음</strong>.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">리턴 주소를 덮어쓰는 과정</code></li>
</ul>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 일반적인 스택 상태
| [ 함수 매개변수 ] |
| [ 리턴 주소 ]    |  &lt;-- 함수가 끝난 후 점프할 주소 (예: 0x08048456)
| [ 저장된 EBP ]   |
| [ 지역 변수 ]    |  &lt;-- 버퍼 (buffer[64])

</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 악의적인 입력으로 리턴 주소 조작
| [ 악성 페이로드 (NOP + 쉘코드) ] |
| [ 새로운 리턴 주소 (0x08048500) ] |  &lt;-- 공격자가 설정한 주소
| [ 저장된 EBP ]                  |
| [ buffer[] ]                  |

</code></pre></div></div>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="OS" /><category term="Memory" /><category term="OperatingSystem" /><category term="SystemProgramming" /><category term="OS" /><summary type="html"><![CDATA[프로세스의 메모리 구조에 대해 알아보자]]></summary></entry><entry><title type="html">[DevLog] Maplestory 모작 개발일지 #15</title><link href="http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy15/" rel="alternate" type="text/html" title="[DevLog] Maplestory 모작 개발일지 #15" /><published>2025-02-27T00:00:00+09:00</published><updated>2025-02-27T00:00:00+09:00</updated><id>http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy15</id><content type="html" xml:base="http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy15/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2025/02/27</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>캐릭터 움직임 속도를 이용하도록 리팩토링</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<p>캐릭터의 좌, 우 이동 속도가 다른 문제 해결</p>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<ul>
  <li>
    <p>Rigidbody::Velocity를 조작하여 캐릭터를 움직였을 때, 왼쪽으로는 빠르게, 오른쪽으로는 느리게 이동함</p>

    <p>캐릭터를 화면 안으로 조정해주는 과정에서 std::clamp&lt;int&gt;를 사용해서 문제가 발생했다. 위치를 저장하는 Vector2는 내부에 float로 좌표를 저장한다. 또한 현재 프레임 당 캐릭터의 이동 거리는 평균 1.8 정도이다. 처음 x 좌표가 5라고 할 때, 오른쪽으로 이동한 다음 프레임에서의 정확한 위치는 6.8이고, 왼쪽으로 이동한 후의 정확한 위치는 3.2이다. 여기서 int로 템플릿화 된 clamp함수에 인자로 들어가게 되면 오른쪽으로 이동한 후 버려지는 값은 0.8이고, 왼쪽으로 이동한 후 버려지는 값은 0.2이다. 또한 결과 값이 int로 반환되므로, 매 프레임마다 오른쪽으로 이동한 경우 0.8, 왼쪽으로 이동한 경우 0.2 만큼의 거리가 손실된다(0 &lt;= x &lt;= resolution.x). std::clamp&lt;float&gt;로 바꾸거나 이동 거리의 소수점이 0.5 정도 되면 괜찮을까? 아니다. Bitblt 등 렌더링하는 함수는 결국 int형으로 좌표를 입력받기 때문에 소수점값에서 손실이 생겨 std::clamp&lt;float&gt;는 임시방편에 불과하다. 또한 이동 거리의 소수점이 0.5인 경우에도, x의 좌표는 양수에서만 존재하기 때문에 문제가 된다. 다시 처음 위치가 5인 경우를 생각해 보자. 왼쪽으로 0.5 이동한 경우 4.5, 오른쪽으로 0.5 이동한 경우 5.5의 위치가 된다. 이 때, int형으로 암묵적 형변환이 일어나면 전자의 경우 4, 후자의 경우 5가 되므로 정확한 위치의 보장이 어렵다. 더 자연스러운 움직임을 위해, HDC에 그리기 직전에 std::round() 함수로 보정하기로 했다.</p>
  </li>
</ul>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<p>캐릭터 움직임 속도를 이용하도록 리팩토링</p>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>일찍 일어나서 공부하러 오니까 집중이 잘된다. 오랜만이라 그런가?</p>

<p>생각보다 캐릭터 움직임 구현이 케이스가 많고, 회사 지원이랑 겹쳐서 시간도 많이 잡아먹고 있다. 분발해서 빨리 끝내보자.</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="GameEngine" /><category term="WinAPI" /><category term="Maplestory" /><category term="개발일지" /><category term="WinAPI" /><category term="Maplestory" /><summary type="html"><![CDATA[Maplestory 모작 개발일지]]></summary></entry><entry><title type="html">[DevLog] Maplestory 모작 개발일지 #14</title><link href="http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy14/" rel="alternate" type="text/html" title="[DevLog] Maplestory 모작 개발일지 #14" /><published>2025-02-20T00:00:00+09:00</published><updated>2025-02-20T00:00:00+09:00</updated><id>http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy14</id><content type="html" xml:base="http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy14/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2025/02/19</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>Player 상태 및 애니메이션 구현
Rigidbody 구현</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">unresolved external symbol "class hs::Application hs::app" (?app@hs@@3VApplication@1@A)</code> 링커 오류 발생</li>
</ul>

<p>HyunsoonEngine.cpp에 아래와 같이 app을 선언했다.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hs</span><span class="o">::</span><span class="n">Application</span> <span class="n">app</span><span class="p">;</span>
</code></pre></div></div>

<p>이후 다른 cpp 파일에서 app을 사용하기 위해 아래와 같이 extern을 사용더니 에러가 발생했다.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Case 1</span>
<span class="k">namespace</span> <span class="n">hs</span>
<span class="p">{</span>
	<span class="k">extern</span> <span class="n">Application</span> <span class="n">app</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>아래와 같이 바꿔 빌드했더니 정상적으로 빌드가 되었다.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Case 2</span>
<span class="k">extern</span> <span class="n">hs</span><span class="o">::</span><span class="n">Application</span> <span class="n">app</span><span class="p">;</span>
</code></pre></div></div>

<p>각각의 경우에 대해, dumpbin으로 심볼을 확인해 봤다.</p>
<ul>
  <li>
    <p>Case 1
<img width="1440" alt="Image" src="https://github.com/user-attachments/assets/273c267a-250f-47d0-81cc-560e4c9d8677" /></p>
  </li>
  <li>
    <p>Case 2
<img width="1440" alt="Image" src="https://github.com/user-attachments/assets/7502a871-3b12-465d-ae90-8c0baf26f567" /></p>
  </li>
  <li>
    <p>HyunsoonEngine의 심볼
<img width="1440" alt="Image" src="https://github.com/user-attachments/assets/948ef195-49d4-41bf-81d6-28f8337245cf" /></p>
  </li>
</ul>

<p>에러가 발생한 Case 1의 심볼을 보면, <code class="language-plaintext highlighter-rouge">?app@hs@@3VApplication@1@A</code>로 Case 2 및 HyunsoonEngine에서의 심볼과 다른 것을 확인할 수 있다. 이로 인해 링커 에러가 발생했다.
다른 컴파일러에서도 Case1의 경우에, hs::app처럼 변수명 앞에도 네임스페이스를 붙이나?</p>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>현재 캐릭터의 상태를 Idle, Walk, Attack, Alert, Jump, … 등으로 분류했다. 그런데 Alert의 경우, 다른 상태와 중첩된 경우가 존재한다. 예를 들어 몬스터에게 공격을 받으며 이동하고 있는 경우 Walk와 Alert가 중첩된다. 또한 사용자 경험적인 측면에서 Jump 상태에서 Idle을 거쳐서 Walk로 가는 것보다, Jump에서 바로 Walk로 가는 것이 좋아보이는데, 이 경우 캐릭터가 공중에 떠있는지 바닥에 착지했는지에 따라 경우가 나뉜다. Alert는 멤버변수로 시간을 따로 재는 것이 좋아보이고, 공중에 떠있는지 여부도 bool 변수를 하나 만들어서, 이 변수에 따라 갈 수 있는 상태를 정해주는 것이 좋을 것 같다.</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Visual Studio 컴파일러 버전 확인하는 법</code> : Tools -&gt; Command Line -&gt; Developer Command Prompt -&gt; <code class="language-plaintext highlighter-rouge">cl</code> 입력</li>
</ul>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="GameEngine" /><category term="WinAPI" /><category term="Maplestory" /><category term="개발일지" /><category term="WinAPI" /><category term="Maplestory" /><summary type="html"><![CDATA[Maplestory 모작 개발일지]]></summary></entry><entry><title type="html">[DevLog] Maplestory 모작 개발일지 #13</title><link href="http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy13/" rel="alternate" type="text/html" title="[DevLog] Maplestory 모작 개발일지 #13" /><published>2025-02-18T00:00:00+09:00</published><updated>2025-02-18T00:00:00+09:00</updated><id>http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy13</id><content type="html" xml:base="http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy13/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2025/02/18</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>Player 상태 및 애니메이션 구현</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<p>GameObject들이 Component를 사용하는 식으로 구조 변경 중</p>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<p>Player 상태 및 애니메이션 구현</p>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>방향키를 누를 때 마다 애니메이션을 재생시키면 연타했을 때 애니메이션이 멈춘 것 처럼 보인다. 이런 상황을 피하고자 해당 상태에 들어갈 때 애니메이션을 동작시키고, 동작 함수에서는 상태 전이에 관련된 코드만 작성했다.</p>

<p>Attack, Alert 등의 상태에서도 땅에 붙어있는 상태인지, 공중에 떠있는 상태인지 구분이 필요하다. 일단 떠오르는 방식은 비트 플래그인데, 더 좋은 방법이 있을까?</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="GameEngine" /><category term="WinAPI" /><category term="Maplestory" /><category term="개발일지" /><category term="WinAPI" /><category term="Maplestory" /><summary type="html"><![CDATA[Maplestory 모작 개발일지]]></summary></entry><entry><title type="html">[DevLog] Game Engine 개발일지 #12</title><link href="http://localhost:4000/devlog/gameengine/directx11/MaplestoryCopy12/" rel="alternate" type="text/html" title="[DevLog] Game Engine 개발일지 #12" /><published>2025-02-11T00:00:00+09:00</published><updated>2025-02-11T00:00:00+09:00</updated><id>http://localhost:4000/devlog/gameengine/directx11/MaplestoryCopy12</id><content type="html" xml:base="http://localhost:4000/devlog/gameengine/directx11/MaplestoryCopy12/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2024/02/11</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>Animation 클래스 구현하기
Camera 컴포넌트 구현하기
png, bmp 파일 투명하게 렌더링하기
필요한 리소스 정리 및 제작</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<p>Animation 클래스 구현 완료
Camera 컴포넌트 구현 완료
png, bmp 파일 투명하게 렌더링 완료</p>

<p>필요한 리소스 정리 및 제작 진행 중</p>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<ol>
  <li>bmp파일이 alphablend로 그려지지 않음
-&gt; 대부분의 online converter나 편집 프로그램이 bmp를 만들 때 24bit depth로 만든다. 8비트씩 색을 할당하므로 이 경우 alpha값은 존재하지 않는다. 이를 가지고 alpha값이 필요한 alphablend를 사용했기 때문에 출력이 되지 않았다. 투명해야하는 부분을 마젠타색(RGB(255, 0, 255))으로 바꾸고 transparentblt() 함수를 사용하여 해결</li>
</ol>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<p>스프라이트 이미지들 마젠타색 입히고 bmp 파일 하나로 묶기
FSM 구현하기</p>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>혼자서 게임을 만드려니 리소스에도 시간이 많이 쓰인다..</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="GameEngine" /><category term="DirectX11" /><category term="개발일지" /><category term="directX" /><category term="WinAPI" /><summary type="html"><![CDATA[Game Engine 개발일지]]></summary></entry><entry><title type="html">\[Design Pattern\] 유한 상태 머신(FSM, Finite State Machine)</title><link href="http://localhost:4000/designpattern/FSM/" rel="alternate" type="text/html" title="\[Design Pattern\] 유한 상태 머신(FSM, Finite State Machine)" /><published>2025-02-03T00:00:00+09:00</published><updated>2025-02-03T00:00:00+09:00</updated><id>http://localhost:4000/designpattern/FSM</id><content type="html" xml:base="http://localhost:4000/designpattern/FSM/"><![CDATA[<h1 id="1-유한-상태-머신fsm">1. 유한 상태 머신(FSM)</h1>

<p>유한 상태 머신은 유한개의 상태를 정의하고, 조건에 따라 각 상태로 전이하며 객체의 상태 및 행동을 정의하는 프로그래밍 패턴이다.</p>

<h1 id="2-예시">2. 예시</h1>

<p>대표적인 예시로 게임에서의 몬스터가 있다.</p>

<h4 id="2-1-상태state-정의">2-1. 상태(State) 정의</h4>

<p>몬스터가 가질 수 있는 상태를 정의하면 다음과 같다:</p>

<ul>
  <li><strong>Idle (대기)</strong>: 플레이어를 찾지 못한 상태</li>
  <li><strong>Patrol (순찰)</strong>: 일정 경로를 따라 이동</li>
  <li><strong>Chase (추격)</strong>: 플레이어를 발견하고 쫓아감</li>
  <li><strong>Attack (공격)</strong>: 플레이어가 공격 범위 안에 있음</li>
  <li><strong>Flee (도망)</strong>: 체력이 낮아서 도망감</li>
  <li><strong>Dead (죽음)</strong>: 체력이 0이 되어 사망</li>
</ul>

<h4 id="2-2-상태-전이transition-조건">2-2. 상태 전이(Transition) 조건</h4>

<p>몬스터는 특정 조건에 따라 상태를 변경한다:</p>

<ul>
  <li><strong>Idle → Patrol</strong>: 일정 시간이 지나면 순찰을 시작</li>
  <li><strong>Patrol → Chase</strong>: 플레이어가 감지 범위 내로 들어오면</li>
  <li><strong>Chase → Attack</strong>: 플레이어가 공격 범위 안에 들어오면</li>
  <li><strong>Attack → Chase</strong>: 플레이어가 공격 범위를 벗어나면</li>
  <li><strong>Chase → Flee</strong>: 체력이 일정 이하로 떨어지면</li>
  <li><strong>Flee → Idle</strong>: 플레이어가 멀어지면 도망을 멈춤</li>
  <li><strong>어느 상태든 → Dead</strong>: 체력이 0이 되면</li>
</ul>

<h4 id="2-3-예시-코드">2-3. 예시 코드</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="k">class</span> <span class="nc">MonsterState</span> <span class="p">{</span> <span class="n">IDLE</span><span class="p">,</span> <span class="n">PATROL</span><span class="p">,</span> <span class="n">CHASE</span><span class="p">,</span> <span class="n">ATTACK</span><span class="p">,</span> <span class="n">FLEE</span><span class="p">,</span> <span class="n">DEAD</span> <span class="p">};</span>

<span class="k">class</span> <span class="nc">Monster</span> <span class="p">{</span>
<span class="nl">private:</span>
    <span class="n">MonsterState</span> <span class="n">state</span> <span class="o">=</span> <span class="n">MonsterState</span><span class="o">::</span><span class="n">IDLE</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">health</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">playerInSight</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">playerInAttackRange</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>

<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">update</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="n">MonsterState</span><span class="o">::</span><span class="n">IDLE</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">playerInSight</span><span class="p">)</span> <span class="n">state</span> <span class="o">=</span> <span class="n">MonsterState</span><span class="o">::</span><span class="n">CHASE</span><span class="p">;</span>
                <span class="k">else</span> <span class="n">state</span> <span class="o">=</span> <span class="n">MonsterState</span><span class="o">::</span><span class="n">PATROL</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>

            <span class="k">case</span> <span class="n">MonsterState</span><span class="o">::</span><span class="n">PATROL</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">playerInSight</span><span class="p">)</span> <span class="n">state</span> <span class="o">=</span> <span class="n">MonsterState</span><span class="o">::</span><span class="n">CHASE</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>

            <span class="k">case</span> <span class="n">MonsterState</span><span class="o">::</span><span class="n">CHASE</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">playerInAttackRange</span><span class="p">)</span> <span class="n">state</span> <span class="o">=</span> <span class="n">MonsterState</span><span class="o">::</span><span class="n">ATTACK</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">health</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">)</span> <span class="n">state</span> <span class="o">=</span> <span class="n">MonsterState</span><span class="o">::</span><span class="n">FLEE</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>

            <span class="k">case</span> <span class="n">MonsterState</span><span class="o">::</span><span class="n">ATTACK</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">playerInAttackRange</span><span class="p">)</span> <span class="n">state</span> <span class="o">=</span> <span class="n">MonsterState</span><span class="o">::</span><span class="n">CHASE</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>

            <span class="k">case</span> <span class="n">MonsterState</span><span class="o">::</span><span class="n">FLEE</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">health</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">state</span> <span class="o">=</span> <span class="n">MonsterState</span><span class="o">::</span><span class="n">DEAD</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>

            <span class="k">case</span> <span class="n">MonsterState</span><span class="o">::</span><span class="n">DEAD</span><span class="p">:</span>
                <span class="c1">// 몬스터 사망 처리</span>
                <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p><br /></p>
<h1 id="3-장단점">3. 장단점</h1>

<h4 id="3-1-장점">3-1. 장점</h4>
<ul>
  <li>코드 구조화 : 상태 기반으로 분리하면 AI 코드가 깔끔해진다.</li>
  <li>확장 용이 : 새로운 상태를 쉽게 추가 가능하다.</li>
  <li>디버깅 편리 : 상태가 명확히 정의되어 문제 발생 시 원인 파악이 쉽다.</li>
</ul>

<h4 id="3-2-단점">3-2. 단점</h4>
<ul>
  <li>상태가 많아지면 분기가 많아지면서 코드가 복잡해질 수 있다.</li>
</ul>]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DesignPattern" /><category term="FSM" /><category term="Automata" /><category term="DesignPattern" /><summary type="html"><![CDATA[AI, UI, Animation 등에 사용되는 FSM을 알아보자.]]></summary></entry><entry><title type="html">[DevLog] Maplestory 모작 개발일지 #11</title><link href="http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy11/" rel="alternate" type="text/html" title="[DevLog] Maplestory 모작 개발일지 #11" /><published>2025-02-02T00:00:00+09:00</published><updated>2025-02-02T00:00:00+09:00</updated><id>http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy11</id><content type="html" xml:base="http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy11/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2025/02/02</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>구조 리팩토링(엔진 코드와 게임 코드의 결합도 제거)</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<p>작업 목표 완료</p>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AddGameObject 함수에서 접근하는 mActiveScene 포인터가 nullptr이었다.</code>
 -&gt; SceneManager::CreateScene()에서 만든 씬을 바로 activeScene으로 설정하는 코드를 주석처리해서 문제 발생. 현재 AddGameObject() 함수가 activeScene에 물체를 추가하도록 구현되어 있다. Scene pointer를 받아서 해당 씬에 오브젝트를 생성해주는 함수를 추가로 만들 수도 있지만, 처음 씬을 초기화할 때가 아니면 해당 함수를 사용할 경우는 거의 없을 것 같다. 따라서 AddGameObject() 함수를 현재 상태로 유지하고 CreateScene()에서 만든 Scene을 바로 activeScene으로 설정하도록 했다.</li>
</ul>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<p>Animation 클래스 구현하기
Camera 컴포넌트 구현하기
FSM 공부하기</p>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>슬슬 게임 로직 구체적으로 고민해야될 듯 싶다</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="GameEngine" /><category term="WinAPI" /><category term="Maplestory" /><category term="개발일지" /><category term="WinAPI" /><category term="Maplestory" /><summary type="html"><![CDATA[Maplestory 모작 개발일지]]></summary></entry><entry><title type="html">[DevLog] Maplestory 모작 개발일지 #10</title><link href="http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy10/" rel="alternate" type="text/html" title="[DevLog] Maplestory 모작 개발일지 #10" /><published>2025-01-31T00:00:00+09:00</published><updated>2025-01-31T00:00:00+09:00</updated><id>http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy10</id><content type="html" xml:base="http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy10/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2025/01/31</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<ul>
  <li>Resource, Resources 클래스 구현</li>
  <li>Texture 클래스 구현</li>
</ul>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<ul>
  <li>작업 목표 구현 완료</li>
  <li>구조 리팩토링(엔진 코드와 게임 코드의 결합도 제거) 중</li>
</ul>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<p>리팩토링(엔진 코드와 게임 코드의 결합도 제거)</p>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>Destructor 호출 순서를 테스트하다가 이상한 점을 발견했다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">test2</span>
<span class="p">{</span>
<span class="nl">public:</span>
<span class="n">test2</span><span class="p">();</span>
<span class="o">~</span><span class="n">test2</span><span class="p">();</span>
<span class="p">};</span>
  
<span class="n">test2</span><span class="o">::</span><span class="n">test2</span><span class="p">()</span>
<span class="p">{</span>
<span class="p">}</span>

<span class="n">test2</span><span class="o">::~</span><span class="n">test2</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">" test2 destructor called</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">test</span>
<span class="p">{</span>
<span class="nl">private:</span>
	<span class="n">string</span> <span class="n">mName</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">test2</span><span class="o">&gt;</span> <span class="n">mVec</span><span class="p">;</span>
	<span class="n">test</span><span class="p">();</span>
	<span class="o">~</span><span class="n">test</span><span class="p">();</span>
<span class="p">};</span>

<span class="n">test</span><span class="o">::</span><span class="n">test</span><span class="p">()</span>
<span class="p">{</span>
<span class="p">}</span>

<span class="n">test</span><span class="o">::~</span><span class="n">test</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span><span class="s">"test destructor called.</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">test</span> <span class="n">v</span><span class="p">;</span>

	<span class="p">{</span>
		<span class="n">test2</span> <span class="n">c</span><span class="p">;</span>
		<span class="n">test2</span> <span class="n">d</span><span class="p">;</span>
		
		<span class="n">v</span><span class="p">.</span><span class="n">mVec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
		<span class="n">v</span><span class="p">.</span><span class="n">mVec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
		
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"out</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
	<span class="p">}</span>

<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위 코드를 실행했는데, 결과가 아래와 같았다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>╰─ ./a.out     
 test2 destructor called
out
 test2 destructor called
 test2 destructor called
test destructor called.
 test2 destructor called
 test2 destructor called
</code></pre></div></div>

<p>내 생각대로라면 <code class="language-plaintext highlighter-rouge">test2</code>의 destructor가 4번 호출되어야 하는데, 출력을 보면 out 위에 destructor가 한번 더 호출되었다.
원인은 std::vector의 초기 메모리 할당이었다. 나는 컴파일러를 g++을 사용했는데, g++은 vector의 capacity를 지정해주지 않을 경우 초기값을 0으로 설정한다고 한다. 따라서 위에서 1번의 push_back을 실행했을 때, capacity를 1로 늘리고, c를 복사 생성한다. 이후 한번의 push_back이 추가로 실행됐을 때, capacity를 2배로 늘려 할당하고 기존의 메모리에 들어있던 값들을 복사해온다. 이 과정에서 원래 메모리의 해제와 함께 기존에 복사생성된 c의 destructor가 호출된다. 따라서 결과적으로 destructor가 5번 호출되었던 것이다.</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="GameEngine" /><category term="WinAPI" /><category term="Maplestory" /><category term="개발일지" /><category term="WinAPI" /><category term="Maplestory" /><summary type="html"><![CDATA[Maplestory 모작 개발일지]]></summary></entry><entry><title type="html">[DevLog] Maplestory 모작 개발일지 #09</title><link href="http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy09/" rel="alternate" type="text/html" title="[DevLog] Maplestory 모작 개발일지 #09" /><published>2025-01-28T00:00:00+09:00</published><updated>2025-01-28T00:00:00+09:00</updated><id>http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy09</id><content type="html" xml:base="http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy09/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2025/01/28</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>object::Instantiate()로 객체 생성하도록 리팩토링</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<p>목표 완료</p>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<ul>
  <li>Player를 static으로 선언해놔서, 생성자에서 initialize() 호출할 때 gdiplus가 초기화되어있지 않음. -&gt; 순서를 직접 조정하기 위해 static으로 구현했던 Player 싱글톤 패턴을 동적 할당으로 변경</li>
  <li>시작 맵 레이어가 3개로 나누어져 있어서, 각각 그렸더니 fps가 너무 크게 떨어졌다. -&gt; 하나의 사진으로 합쳐서 렌더링했다.</li>
</ul>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<ul>
  <li>Resource, Resources 클래스 구현</li>
  <li>Texture 클래스 구현</li>
</ul>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>Scene마다 Player::GetInstance()를 호출해서 player layer에 추가해야 한다. 현재 각각의 Initialize() 함수에서 추가하고 있는데, 깔끔하게 한번에 추가하는 방법을 생각해보자. -&gt; 부모 Scene 클래스에서 미리 하면 될 듯?
player layer를 없애고, 모든 layer render 후 player만 따로 렌더링 하는 것도 생각해봤지만, 게임 엔진 관점에서 봤을 때 특정 게임에만 특화되는 느낌이 든다. 플레이어가 몸을 바꿔가며 플레이하면 여러 캐릭터가 렌더링되어야 한다. 너무 메이플스토리만 생각하지 말자.</p>

<p>debug 모드에서만 실행되는 assert를 잘 사용하는 게 좋다고 한다. 써본적이 없어서 그런지, 이 부분에서 써야겠다는 생각이 들지 않는다. 계속 의식을 하는게 좋겠다.</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="GameEngine" /><category term="WinAPI" /><category term="Maplestory" /><category term="개발일지" /><category term="WinAPI" /><category term="Maplestory" /><summary type="html"><![CDATA[Maplestory 모작 개발일지]]></summary></entry><entry><title type="html">[DevLog] Maplestory 모작 개발일지 #08</title><link href="http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy08/" rel="alternate" type="text/html" title="[DevLog] Maplestory 모작 개발일지 #08" /><published>2025-01-27T00:00:00+09:00</published><updated>2025-01-27T00:00:00+09:00</updated><id>http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy08</id><content type="html" xml:base="http://localhost:4000/devlog/gameengine/winapi/maplestory/MaplestoryCopy08/"><![CDATA[<h2 id="1-날짜-date">1. 날짜 (Date)</h2>

<p>2025/01/27</p>

<hr />

<h2 id="2-작업-목표-daily-goals">2. 작업 목표 (Daily Goals)</h2>

<p>ObjectUtils, 디렉토리 정리
Gdiplus 오류 원인 찾기</p>

<hr />

<h2 id="3-진행-사항-progress">3. 진행 사항 (Progress)</h2>

<p>작업 목표 완료</p>

<hr />

<h2 id="4-문제점-및-해결-방법-challenges--solutions">4. 문제점 및 해결 방법 (Challenges &amp; Solutions)</h2>

<ul>
  <li>Gdi plus 라이브러리를 사용하여 이미지를 불러오는데, <code class="language-plaintext highlighter-rouge">Gdiplus::Image::FromFile</code> 함수가 자꾸 null을 리턴했다
-&gt; gdiplus 초기화 함수를 app.initialize() 이후에 실행해서 문제가 발생했다. app.initialize 내부에서 gdiplus 라이브러리를 사용하기 때문에, 이 전에 gdiplus를 초기화해줘야한다.</li>
</ul>

<hr />

<h2 id="5-다음-단계-next-steps">5. 다음 단계 (Next Steps)</h2>

<p>object::Instantiate 함수를 사용하여 객체를 생성하도록 리팩토링</p>

<hr />

<h2 id="6-회고-reflection">6. 회고 (Reflection)</h2>

<p>Instantiate함수가 activeScene에 게임 오브젝트를 만들고 있는데, 투척 무기 등을 그릴 때는 이게 좋겠지만 처음에 맵을 만들 때는 activeScene에 게임 오브젝트를 추가하는 방식이 불편할 수도 있다. 맵별로 헤더와 소스 파일을 만들기보다 json같은 형식으로 파일로 저장해서 불러오는 식으로 만들어볼까?</p>

<p>개발 일지 꼬박꼬박좀 쓰자!!!!@#!$!</p>

<hr />

<h2 id="7-메모-notes">7. 메모 (Notes)</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">template&lt;typename T, typename std::enable_if&lt;std::is_base_of&lt;Component, T&gt;::value, int&gt;::type = 0&gt;</code> : 이를 이용해 컴파일 타임에 <code class="language-plaintext highlighter-rouge">T</code>가 <code class="language-plaintext highlighter-rouge">Component</code>를 상속받은 타입인지 확인할 수 있다. 이 조건이 만족되지 않으면 컴파일 에러가 발생한다.</li>
</ul>

<hr />]]></content><author><name>Hyunsoon Im</name><email>s7514036@naver.com</email></author><category term="DevLog" /><category term="GameEngine" /><category term="WinAPI" /><category term="Maplestory" /><category term="개발일지" /><category term="WinAPI" /><category term="Maplestory" /><summary type="html"><![CDATA[Maplestory 모작 개발일지]]></summary></entry></feed>